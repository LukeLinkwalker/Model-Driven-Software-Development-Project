/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.group9.iOTConnector.BitwiseOperator;
import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.Div;
import org.group9.iOTConnector.Expression;
import org.group9.iOTConnector.Filter;
import org.group9.iOTConnector.FilterAction;
import org.group9.iOTConnector.FilterExp;
import org.group9.iOTConnector.FilterType;
import org.group9.iOTConnector.Function;
import org.group9.iOTConnector.IOTConnectorFactory;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.Minus;
import org.group9.iOTConnector.Mult;
import org.group9.iOTConnector.Num;
import org.group9.iOTConnector.Output;
import org.group9.iOTConnector.Plus;
import org.group9.iOTConnector.ProcessAction;
import org.group9.iOTConnector.Program;
import org.group9.iOTConnector.ReadingName;
import org.group9.iOTConnector.ReadingNameWithConfigScope;
import org.group9.iOTConnector.RelationalOperator;
import org.group9.iOTConnector.Sample;
import org.group9.iOTConnector.SampleAction;
import org.group9.iOTConnector.Send;
import org.group9.iOTConnector.SendAction;
import org.group9.iOTConnector.Sensor;
import org.group9.iOTConnector.SensorConfig;
import org.group9.iOTConnector.TimeUnit;
import org.group9.iOTConnector.Var;
import org.group9.iOTConnector.Webserver;
import org.group9.iOTConnector.Wifi;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IOTConnectorFactoryImpl extends EFactoryImpl implements IOTConnectorFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IOTConnectorFactory init()
  {
    try
    {
      IOTConnectorFactory theIOTConnectorFactory = (IOTConnectorFactory)EPackage.Registry.INSTANCE.getEFactory(IOTConnectorPackage.eNS_URI);
      if (theIOTConnectorFactory != null)
      {
        return theIOTConnectorFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IOTConnectorFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IOTConnectorFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IOTConnectorPackage.PROGRAM: return createProgram();
      case IOTConnectorPackage.WEBSERVER: return createWebserver();
      case IOTConnectorPackage.WIFI: return createWifi();
      case IOTConnectorPackage.CONFIG: return createConfig();
      case IOTConnectorPackage.BOARD: return createBoard();
      case IOTConnectorPackage.SENSOR_CONFIG: return createSensorConfig();
      case IOTConnectorPackage.SENSOR: return createSensor();
      case IOTConnectorPackage.OUTPUT: return createOutput();
      case IOTConnectorPackage.FUNCTION: return createFunction();
      case IOTConnectorPackage.SAMPLE: return createSample();
      case IOTConnectorPackage.SAMPLE_ACTION: return createSampleAction();
      case IOTConnectorPackage.FILTER: return createFilter();
      case IOTConnectorPackage.FILTER_ACTION: return createFilterAction();
      case IOTConnectorPackage.FILTER_EXP: return createFilterExp();
      case IOTConnectorPackage.PROCESS: return createProcess();
      case IOTConnectorPackage.PROCESS_ACTION: return createProcessAction();
      case IOTConnectorPackage.EXPRESSION: return createExpression();
      case IOTConnectorPackage.SEND: return createSend();
      case IOTConnectorPackage.SEND_ACTION: return createSendAction();
      case IOTConnectorPackage.READING_NAME: return createReadingName();
      case IOTConnectorPackage.READING_NAME_WITH_CONFIG_SCOPE: return createReadingNameWithConfigScope();
      case IOTConnectorPackage.BITWISE_OPERATOR: return createBitwiseOperator();
      case IOTConnectorPackage.RELATIONAL_OPERATOR: return createRelationalOperator();
      case IOTConnectorPackage.TIME_UNIT: return createTimeUnit();
      case IOTConnectorPackage.FILTER_TYPE: return createFilterType();
      case IOTConnectorPackage.PLUS: return createPlus();
      case IOTConnectorPackage.MINUS: return createMinus();
      case IOTConnectorPackage.MULT: return createMult();
      case IOTConnectorPackage.DIV: return createDiv();
      case IOTConnectorPackage.NUM: return createNum();
      case IOTConnectorPackage.VAR: return createVar();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Webserver createWebserver()
  {
    WebserverImpl webserver = new WebserverImpl();
    return webserver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wifi createWifi()
  {
    WifiImpl wifi = new WifiImpl();
    return wifi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Board createBoard()
  {
    BoardImpl board = new BoardImpl();
    return board;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorConfig createSensorConfig()
  {
    SensorConfigImpl sensorConfig = new SensorConfigImpl();
    return sensorConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensor createSensor()
  {
    SensorImpl sensor = new SensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sample createSample()
  {
    SampleImpl sample = new SampleImpl();
    return sample;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SampleAction createSampleAction()
  {
    SampleActionImpl sampleAction = new SampleActionImpl();
    return sampleAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterAction createFilterAction()
  {
    FilterActionImpl filterAction = new FilterActionImpl();
    return filterAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterExp createFilterExp()
  {
    FilterExpImpl filterExp = new FilterExpImpl();
    return filterExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.group9.iOTConnector.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessAction createProcessAction()
  {
    ProcessActionImpl processAction = new ProcessActionImpl();
    return processAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Send createSend()
  {
    SendImpl send = new SendImpl();
    return send;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SendAction createSendAction()
  {
    SendActionImpl sendAction = new SendActionImpl();
    return sendAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadingName createReadingName()
  {
    ReadingNameImpl readingName = new ReadingNameImpl();
    return readingName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadingNameWithConfigScope createReadingNameWithConfigScope()
  {
    ReadingNameWithConfigScopeImpl readingNameWithConfigScope = new ReadingNameWithConfigScopeImpl();
    return readingNameWithConfigScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitwiseOperator createBitwiseOperator()
  {
    BitwiseOperatorImpl bitwiseOperator = new BitwiseOperatorImpl();
    return bitwiseOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalOperator createRelationalOperator()
  {
    RelationalOperatorImpl relationalOperator = new RelationalOperatorImpl();
    return relationalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeUnit createTimeUnit()
  {
    TimeUnitImpl timeUnit = new TimeUnitImpl();
    return timeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilterType createFilterType()
  {
    FilterTypeImpl filterType = new FilterTypeImpl();
    return filterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Num createNum()
  {
    NumImpl num = new NumImpl();
    return num;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IOTConnectorPackage getIOTConnectorPackage()
  {
    return (IOTConnectorPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IOTConnectorPackage getPackage()
  {
    return IOTConnectorPackage.eINSTANCE;
  }

} //IOTConnectorFactoryImpl

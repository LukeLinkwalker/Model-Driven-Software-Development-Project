/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.Program;
import org.group9.iOTConnector.Webserver;
import org.group9.iOTConnector.Wifi;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.group9.iOTConnector.impl.ProgramImpl#getWebserver <em>Webserver</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.ProgramImpl#getWifis <em>Wifis</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.ProgramImpl#getConfigs <em>Configs</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.ProgramImpl#getBoards <em>Boards</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProgramImpl extends MinimalEObjectImpl.Container implements Program
{
  /**
   * The cached value of the '{@link #getWebserver() <em>Webserver</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWebserver()
   * @generated
   * @ordered
   */
  protected Webserver webserver;

  /**
   * The cached value of the '{@link #getWifis() <em>Wifis</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWifis()
   * @generated
   * @ordered
   */
  protected EList<Wifi> wifis;

  /**
   * The cached value of the '{@link #getConfigs() <em>Configs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigs()
   * @generated
   * @ordered
   */
  protected EList<Config> configs;

  /**
   * The cached value of the '{@link #getBoards() <em>Boards</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoards()
   * @generated
   * @ordered
   */
  protected EList<Board> boards;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IOTConnectorPackage.Literals.PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Webserver getWebserver()
  {
    return webserver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWebserver(Webserver newWebserver, NotificationChain msgs)
  {
    Webserver oldWebserver = webserver;
    webserver = newWebserver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.PROGRAM__WEBSERVER, oldWebserver, newWebserver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWebserver(Webserver newWebserver)
  {
    if (newWebserver != webserver)
    {
      NotificationChain msgs = null;
      if (webserver != null)
        msgs = ((InternalEObject)webserver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.PROGRAM__WEBSERVER, null, msgs);
      if (newWebserver != null)
        msgs = ((InternalEObject)newWebserver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.PROGRAM__WEBSERVER, null, msgs);
      msgs = basicSetWebserver(newWebserver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.PROGRAM__WEBSERVER, newWebserver, newWebserver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Wifi> getWifis()
  {
    if (wifis == null)
    {
      wifis = new EObjectContainmentEList<Wifi>(Wifi.class, this, IOTConnectorPackage.PROGRAM__WIFIS);
    }
    return wifis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Config> getConfigs()
  {
    if (configs == null)
    {
      configs = new EObjectContainmentEList<Config>(Config.class, this, IOTConnectorPackage.PROGRAM__CONFIGS);
    }
    return configs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Board> getBoards()
  {
    if (boards == null)
    {
      boards = new EObjectContainmentEList<Board>(Board.class, this, IOTConnectorPackage.PROGRAM__BOARDS);
    }
    return boards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.PROGRAM__WEBSERVER:
        return basicSetWebserver(null, msgs);
      case IOTConnectorPackage.PROGRAM__WIFIS:
        return ((InternalEList<?>)getWifis()).basicRemove(otherEnd, msgs);
      case IOTConnectorPackage.PROGRAM__CONFIGS:
        return ((InternalEList<?>)getConfigs()).basicRemove(otherEnd, msgs);
      case IOTConnectorPackage.PROGRAM__BOARDS:
        return ((InternalEList<?>)getBoards()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.PROGRAM__WEBSERVER:
        return getWebserver();
      case IOTConnectorPackage.PROGRAM__WIFIS:
        return getWifis();
      case IOTConnectorPackage.PROGRAM__CONFIGS:
        return getConfigs();
      case IOTConnectorPackage.PROGRAM__BOARDS:
        return getBoards();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.PROGRAM__WEBSERVER:
        setWebserver((Webserver)newValue);
        return;
      case IOTConnectorPackage.PROGRAM__WIFIS:
        getWifis().clear();
        getWifis().addAll((Collection<? extends Wifi>)newValue);
        return;
      case IOTConnectorPackage.PROGRAM__CONFIGS:
        getConfigs().clear();
        getConfigs().addAll((Collection<? extends Config>)newValue);
        return;
      case IOTConnectorPackage.PROGRAM__BOARDS:
        getBoards().clear();
        getBoards().addAll((Collection<? extends Board>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.PROGRAM__WEBSERVER:
        setWebserver((Webserver)null);
        return;
      case IOTConnectorPackage.PROGRAM__WIFIS:
        getWifis().clear();
        return;
      case IOTConnectorPackage.PROGRAM__CONFIGS:
        getConfigs().clear();
        return;
      case IOTConnectorPackage.PROGRAM__BOARDS:
        getBoards().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.PROGRAM__WEBSERVER:
        return webserver != null;
      case IOTConnectorPackage.PROGRAM__WIFIS:
        return wifis != null && !wifis.isEmpty();
      case IOTConnectorPackage.PROGRAM__CONFIGS:
        return configs != null && !configs.isEmpty();
      case IOTConnectorPackage.PROGRAM__BOARDS:
        return boards != null && !boards.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ProgramImpl

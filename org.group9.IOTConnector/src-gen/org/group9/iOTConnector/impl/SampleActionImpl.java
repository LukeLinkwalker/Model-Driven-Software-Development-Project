/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.ReadingName;
import org.group9.iOTConnector.ReadingNameWithConfigScope;
import org.group9.iOTConnector.RelationalOperator;
import org.group9.iOTConnector.SampleAction;
import org.group9.iOTConnector.TimeUnit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sample Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getReadingName <em>Reading Name</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getReadingNameToCompare <em>Reading Name To Compare</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getRelationalOperator <em>Relational Operator</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getNumber <em>Number</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getAmountOfTime <em>Amount Of Time</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SampleActionImpl#getTimeUnit <em>Time Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SampleActionImpl extends MinimalEObjectImpl.Container implements SampleAction
{
  /**
   * The cached value of the '{@link #getReadingName() <em>Reading Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReadingName()
   * @generated
   * @ordered
   */
  protected ReadingName readingName;

  /**
   * The cached value of the '{@link #getReadingNameToCompare() <em>Reading Name To Compare</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReadingNameToCompare()
   * @generated
   * @ordered
   */
  protected ReadingNameWithConfigScope readingNameToCompare;

  /**
   * The cached value of the '{@link #getRelationalOperator() <em>Relational Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationalOperator()
   * @generated
   * @ordered
   */
  protected RelationalOperator relationalOperator;

  /**
   * The default value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected static final int NUMBER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected int number = NUMBER_EDEFAULT;

  /**
   * The default value of the '{@link #getAmountOfTime() <em>Amount Of Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmountOfTime()
   * @generated
   * @ordered
   */
  protected static final int AMOUNT_OF_TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAmountOfTime() <em>Amount Of Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmountOfTime()
   * @generated
   * @ordered
   */
  protected int amountOfTime = AMOUNT_OF_TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTimeUnit() <em>Time Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeUnit()
   * @generated
   * @ordered
   */
  protected TimeUnit timeUnit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SampleActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IOTConnectorPackage.Literals.SAMPLE_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadingName getReadingName()
  {
    if (readingName != null && readingName.eIsProxy())
    {
      InternalEObject oldReadingName = (InternalEObject)readingName;
      readingName = (ReadingName)eResolveProxy(oldReadingName);
      if (readingName != oldReadingName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IOTConnectorPackage.SAMPLE_ACTION__READING_NAME, oldReadingName, readingName));
      }
    }
    return readingName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReadingName basicGetReadingName()
  {
    return readingName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReadingName(ReadingName newReadingName)
  {
    ReadingName oldReadingName = readingName;
    readingName = newReadingName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__READING_NAME, oldReadingName, readingName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadingNameWithConfigScope getReadingNameToCompare()
  {
    return readingNameToCompare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReadingNameToCompare(ReadingNameWithConfigScope newReadingNameToCompare, NotificationChain msgs)
  {
    ReadingNameWithConfigScope oldReadingNameToCompare = readingNameToCompare;
    readingNameToCompare = newReadingNameToCompare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE, oldReadingNameToCompare, newReadingNameToCompare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReadingNameToCompare(ReadingNameWithConfigScope newReadingNameToCompare)
  {
    if (newReadingNameToCompare != readingNameToCompare)
    {
      NotificationChain msgs = null;
      if (readingNameToCompare != null)
        msgs = ((InternalEObject)readingNameToCompare).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE, null, msgs);
      if (newReadingNameToCompare != null)
        msgs = ((InternalEObject)newReadingNameToCompare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE, null, msgs);
      msgs = basicSetReadingNameToCompare(newReadingNameToCompare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE, newReadingNameToCompare, newReadingNameToCompare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalOperator getRelationalOperator()
  {
    return relationalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationalOperator(RelationalOperator newRelationalOperator, NotificationChain msgs)
  {
    RelationalOperator oldRelationalOperator = relationalOperator;
    relationalOperator = newRelationalOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR, oldRelationalOperator, newRelationalOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelationalOperator(RelationalOperator newRelationalOperator)
  {
    if (newRelationalOperator != relationalOperator)
    {
      NotificationChain msgs = null;
      if (relationalOperator != null)
        msgs = ((InternalEObject)relationalOperator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR, null, msgs);
      if (newRelationalOperator != null)
        msgs = ((InternalEObject)newRelationalOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR, null, msgs);
      msgs = basicSetRelationalOperator(newRelationalOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR, newRelationalOperator, newRelationalOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumber()
  {
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumber(int newNumber)
  {
    int oldNumber = number;
    number = newNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__NUMBER, oldNumber, number));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getAmountOfTime()
  {
    return amountOfTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAmountOfTime(int newAmountOfTime)
  {
    int oldAmountOfTime = amountOfTime;
    amountOfTime = newAmountOfTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__AMOUNT_OF_TIME, oldAmountOfTime, amountOfTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeUnit getTimeUnit()
  {
    return timeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeUnit(TimeUnit newTimeUnit, NotificationChain msgs)
  {
    TimeUnit oldTimeUnit = timeUnit;
    timeUnit = newTimeUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT, oldTimeUnit, newTimeUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeUnit(TimeUnit newTimeUnit)
  {
    if (newTimeUnit != timeUnit)
    {
      NotificationChain msgs = null;
      if (timeUnit != null)
        msgs = ((InternalEObject)timeUnit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT, null, msgs);
      if (newTimeUnit != null)
        msgs = ((InternalEObject)newTimeUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT, null, msgs);
      msgs = basicSetTimeUnit(newTimeUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT, newTimeUnit, newTimeUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE:
        return basicSetReadingNameToCompare(null, msgs);
      case IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR:
        return basicSetRelationalOperator(null, msgs);
      case IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT:
        return basicSetTimeUnit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME:
        if (resolve) return getReadingName();
        return basicGetReadingName();
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE:
        return getReadingNameToCompare();
      case IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR:
        return getRelationalOperator();
      case IOTConnectorPackage.SAMPLE_ACTION__NUMBER:
        return getNumber();
      case IOTConnectorPackage.SAMPLE_ACTION__AMOUNT_OF_TIME:
        return getAmountOfTime();
      case IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT:
        return getTimeUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME:
        setReadingName((ReadingName)newValue);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE:
        setReadingNameToCompare((ReadingNameWithConfigScope)newValue);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR:
        setRelationalOperator((RelationalOperator)newValue);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__NUMBER:
        setNumber((Integer)newValue);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__AMOUNT_OF_TIME:
        setAmountOfTime((Integer)newValue);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT:
        setTimeUnit((TimeUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME:
        setReadingName((ReadingName)null);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE:
        setReadingNameToCompare((ReadingNameWithConfigScope)null);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR:
        setRelationalOperator((RelationalOperator)null);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__NUMBER:
        setNumber(NUMBER_EDEFAULT);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__AMOUNT_OF_TIME:
        setAmountOfTime(AMOUNT_OF_TIME_EDEFAULT);
        return;
      case IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT:
        setTimeUnit((TimeUnit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME:
        return readingName != null;
      case IOTConnectorPackage.SAMPLE_ACTION__READING_NAME_TO_COMPARE:
        return readingNameToCompare != null;
      case IOTConnectorPackage.SAMPLE_ACTION__RELATIONAL_OPERATOR:
        return relationalOperator != null;
      case IOTConnectorPackage.SAMPLE_ACTION__NUMBER:
        return number != NUMBER_EDEFAULT;
      case IOTConnectorPackage.SAMPLE_ACTION__AMOUNT_OF_TIME:
        return amountOfTime != AMOUNT_OF_TIME_EDEFAULT;
      case IOTConnectorPackage.SAMPLE_ACTION__TIME_UNIT:
        return timeUnit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (number: ");
    result.append(number);
    result.append(", amountOfTime: ");
    result.append(amountOfTime);
    result.append(')');
    return result.toString();
  }

} //SampleActionImpl

/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.SensorConfig;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Board</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.group9.iOTConnector.impl.BoardImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.BoardImpl#getSensorConfigs <em>Sensor Configs</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.BoardImpl#getConfigName <em>Config Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BoardImpl extends MinimalEObjectImpl.Container implements Board
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSensorConfigs() <em>Sensor Configs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensorConfigs()
   * @generated
   * @ordered
   */
  protected EList<SensorConfig> sensorConfigs;

  /**
   * The cached value of the '{@link #getConfigName() <em>Config Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigName()
   * @generated
   * @ordered
   */
  protected Config configName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BoardImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IOTConnectorPackage.Literals.BOARD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.BOARD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SensorConfig> getSensorConfigs()
  {
    if (sensorConfigs == null)
    {
      sensorConfigs = new EObjectContainmentEList<SensorConfig>(SensorConfig.class, this, IOTConnectorPackage.BOARD__SENSOR_CONFIGS);
    }
    return sensorConfigs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Config getConfigName()
  {
    if (configName != null && configName.eIsProxy())
    {
      InternalEObject oldConfigName = (InternalEObject)configName;
      configName = (Config)eResolveProxy(oldConfigName);
      if (configName != oldConfigName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IOTConnectorPackage.BOARD__CONFIG_NAME, oldConfigName, configName));
      }
    }
    return configName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Config basicGetConfigName()
  {
    return configName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfigName(Config newConfigName)
  {
    Config oldConfigName = configName;
    configName = newConfigName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.BOARD__CONFIG_NAME, oldConfigName, configName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.BOARD__SENSOR_CONFIGS:
        return ((InternalEList<?>)getSensorConfigs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.BOARD__NAME:
        return getName();
      case IOTConnectorPackage.BOARD__SENSOR_CONFIGS:
        return getSensorConfigs();
      case IOTConnectorPackage.BOARD__CONFIG_NAME:
        if (resolve) return getConfigName();
        return basicGetConfigName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.BOARD__NAME:
        setName((String)newValue);
        return;
      case IOTConnectorPackage.BOARD__SENSOR_CONFIGS:
        getSensorConfigs().clear();
        getSensorConfigs().addAll((Collection<? extends SensorConfig>)newValue);
        return;
      case IOTConnectorPackage.BOARD__CONFIG_NAME:
        setConfigName((Config)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.BOARD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IOTConnectorPackage.BOARD__SENSOR_CONFIGS:
        getSensorConfigs().clear();
        return;
      case IOTConnectorPackage.BOARD__CONFIG_NAME:
        setConfigName((Config)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.BOARD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IOTConnectorPackage.BOARD__SENSOR_CONFIGS:
        return sensorConfigs != null && !sensorConfigs.isEmpty();
      case IOTConnectorPackage.BOARD__CONFIG_NAME:
        return configName != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //BoardImpl

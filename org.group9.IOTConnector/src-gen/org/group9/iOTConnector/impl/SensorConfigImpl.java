/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.SensorConfig;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.group9.iOTConnector.impl.SensorConfigImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SensorConfigImpl#getPinIn <em>Pin In</em>}</li>
 *   <li>{@link org.group9.iOTConnector.impl.SensorConfigImpl#getPinOut <em>Pin Out</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorConfigImpl extends MinimalEObjectImpl.Container implements SensorConfig
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getPinIn() <em>Pin In</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPinIn()
   * @generated
   * @ordered
   */
  protected static final String PIN_IN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPinIn() <em>Pin In</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPinIn()
   * @generated
   * @ordered
   */
  protected String pinIn = PIN_IN_EDEFAULT;

  /**
   * The default value of the '{@link #getPinOut() <em>Pin Out</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPinOut()
   * @generated
   * @ordered
   */
  protected static final String PIN_OUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPinOut() <em>Pin Out</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPinOut()
   * @generated
   * @ordered
   */
  protected String pinOut = PIN_OUT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IOTConnectorPackage.Literals.SENSOR_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SENSOR_CONFIG__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPinIn()
  {
    return pinIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPinIn(String newPinIn)
  {
    String oldPinIn = pinIn;
    pinIn = newPinIn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SENSOR_CONFIG__PIN_IN, oldPinIn, pinIn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPinOut()
  {
    return pinOut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPinOut(String newPinOut)
  {
    String oldPinOut = pinOut;
    pinOut = newPinOut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IOTConnectorPackage.SENSOR_CONFIG__PIN_OUT, oldPinOut, pinOut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SENSOR_CONFIG__NAME:
        return getName();
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_IN:
        return getPinIn();
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_OUT:
        return getPinOut();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SENSOR_CONFIG__NAME:
        setName((String)newValue);
        return;
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_IN:
        setPinIn((String)newValue);
        return;
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_OUT:
        setPinOut((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SENSOR_CONFIG__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_IN:
        setPinIn(PIN_IN_EDEFAULT);
        return;
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_OUT:
        setPinOut(PIN_OUT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IOTConnectorPackage.SENSOR_CONFIG__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_IN:
        return PIN_IN_EDEFAULT == null ? pinIn != null : !PIN_IN_EDEFAULT.equals(pinIn);
      case IOTConnectorPackage.SENSOR_CONFIG__PIN_OUT:
        return PIN_OUT_EDEFAULT == null ? pinOut != null : !PIN_OUT_EDEFAULT.equals(pinOut);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", pinIn: ");
    result.append(pinIn);
    result.append(", pinOut: ");
    result.append(pinOut);
    result.append(')');
    return result.toString();
  }

} //SensorConfigImpl

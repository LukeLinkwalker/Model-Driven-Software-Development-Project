/**
 * generated by Xtext 2.21.0
 */
package org.group9.iOTConnector.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.group9.iOTConnector.BitwiseOperator;
import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.Div;
import org.group9.iOTConnector.Expression;
import org.group9.iOTConnector.Filter;
import org.group9.iOTConnector.FilterAction;
import org.group9.iOTConnector.FilterExp;
import org.group9.iOTConnector.FilterType;
import org.group9.iOTConnector.Function;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.Minus;
import org.group9.iOTConnector.Mult;
import org.group9.iOTConnector.Num;
import org.group9.iOTConnector.Output;
import org.group9.iOTConnector.Plus;
import org.group9.iOTConnector.ProcessAction;
import org.group9.iOTConnector.Program;
import org.group9.iOTConnector.ReadingName;
import org.group9.iOTConnector.ReadingNameWithConfigScope;
import org.group9.iOTConnector.RelationalOperator;
import org.group9.iOTConnector.Sample;
import org.group9.iOTConnector.SampleAction;
import org.group9.iOTConnector.Send;
import org.group9.iOTConnector.SendAction;
import org.group9.iOTConnector.Sensor;
import org.group9.iOTConnector.SensorConfig;
import org.group9.iOTConnector.TimeUnit;
import org.group9.iOTConnector.Var;
import org.group9.iOTConnector.Webserver;
import org.group9.iOTConnector.Wifi;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.group9.iOTConnector.IOTConnectorPackage
 * @generated
 */
public class IOTConnectorAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IOTConnectorPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IOTConnectorAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = IOTConnectorPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IOTConnectorSwitch<Adapter> modelSwitch =
    new IOTConnectorSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseWebserver(Webserver object)
      {
        return createWebserverAdapter();
      }
      @Override
      public Adapter caseWifi(Wifi object)
      {
        return createWifiAdapter();
      }
      @Override
      public Adapter caseConfig(Config object)
      {
        return createConfigAdapter();
      }
      @Override
      public Adapter caseBoard(Board object)
      {
        return createBoardAdapter();
      }
      @Override
      public Adapter caseSensorConfig(SensorConfig object)
      {
        return createSensorConfigAdapter();
      }
      @Override
      public Adapter caseSensor(Sensor object)
      {
        return createSensorAdapter();
      }
      @Override
      public Adapter caseOutput(Output object)
      {
        return createOutputAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseSample(Sample object)
      {
        return createSampleAdapter();
      }
      @Override
      public Adapter caseSampleAction(SampleAction object)
      {
        return createSampleActionAdapter();
      }
      @Override
      public Adapter caseFilter(Filter object)
      {
        return createFilterAdapter();
      }
      @Override
      public Adapter caseFilterAction(FilterAction object)
      {
        return createFilterActionAdapter();
      }
      @Override
      public Adapter caseFilterExp(FilterExp object)
      {
        return createFilterExpAdapter();
      }
      @Override
      public Adapter caseProcess(org.group9.iOTConnector.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter caseProcessAction(ProcessAction object)
      {
        return createProcessActionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSend(Send object)
      {
        return createSendAdapter();
      }
      @Override
      public Adapter caseSendAction(SendAction object)
      {
        return createSendActionAdapter();
      }
      @Override
      public Adapter caseReadingName(ReadingName object)
      {
        return createReadingNameAdapter();
      }
      @Override
      public Adapter caseReadingNameWithConfigScope(ReadingNameWithConfigScope object)
      {
        return createReadingNameWithConfigScopeAdapter();
      }
      @Override
      public Adapter caseBitwiseOperator(BitwiseOperator object)
      {
        return createBitwiseOperatorAdapter();
      }
      @Override
      public Adapter caseRelationalOperator(RelationalOperator object)
      {
        return createRelationalOperatorAdapter();
      }
      @Override
      public Adapter caseTimeUnit(TimeUnit object)
      {
        return createTimeUnitAdapter();
      }
      @Override
      public Adapter caseFilterType(FilterType object)
      {
        return createFilterTypeAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMult(Mult object)
      {
        return createMultAdapter();
      }
      @Override
      public Adapter caseDiv(Div object)
      {
        return createDivAdapter();
      }
      @Override
      public Adapter caseNum(Num object)
      {
        return createNumAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Webserver <em>Webserver</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Webserver
   * @generated
   */
  public Adapter createWebserverAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Wifi <em>Wifi</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Wifi
   * @generated
   */
  public Adapter createWifiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Config <em>Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Config
   * @generated
   */
  public Adapter createConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Board <em>Board</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Board
   * @generated
   */
  public Adapter createBoardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.SensorConfig <em>Sensor Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.SensorConfig
   * @generated
   */
  public Adapter createSensorConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Sensor <em>Sensor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Sensor
   * @generated
   */
  public Adapter createSensorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Output
   * @generated
   */
  public Adapter createOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Sample <em>Sample</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Sample
   * @generated
   */
  public Adapter createSampleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.SampleAction <em>Sample Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.SampleAction
   * @generated
   */
  public Adapter createSampleActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Filter <em>Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Filter
   * @generated
   */
  public Adapter createFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.FilterAction <em>Filter Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.FilterAction
   * @generated
   */
  public Adapter createFilterActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.FilterExp <em>Filter Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.FilterExp
   * @generated
   */
  public Adapter createFilterExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.ProcessAction <em>Process Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.ProcessAction
   * @generated
   */
  public Adapter createProcessActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Send <em>Send</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Send
   * @generated
   */
  public Adapter createSendAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.SendAction <em>Send Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.SendAction
   * @generated
   */
  public Adapter createSendActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.ReadingName <em>Reading Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.ReadingName
   * @generated
   */
  public Adapter createReadingNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.ReadingNameWithConfigScope <em>Reading Name With Config Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.ReadingNameWithConfigScope
   * @generated
   */
  public Adapter createReadingNameWithConfigScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.BitwiseOperator <em>Bitwise Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.BitwiseOperator
   * @generated
   */
  public Adapter createBitwiseOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.RelationalOperator <em>Relational Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.RelationalOperator
   * @generated
   */
  public Adapter createRelationalOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.TimeUnit <em>Time Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.TimeUnit
   * @generated
   */
  public Adapter createTimeUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.FilterType <em>Filter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.FilterType
   * @generated
   */
  public Adapter createFilterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Mult <em>Mult</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Mult
   * @generated
   */
  public Adapter createMultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Div <em>Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Div
   * @generated
   */
  public Adapter createDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Num <em>Num</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Num
   * @generated
   */
  public Adapter createNumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.group9.iOTConnector.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.group9.iOTConnector.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //IOTConnectorAdapterFactory

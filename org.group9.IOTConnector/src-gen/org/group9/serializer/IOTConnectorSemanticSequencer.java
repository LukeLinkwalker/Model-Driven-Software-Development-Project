/*
 * generated by Xtext 2.21.0
 */
package org.group9.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.group9.iOTConnector.BitwiseOperator;
import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.Div;
import org.group9.iOTConnector.Filter;
import org.group9.iOTConnector.FilterAction;
import org.group9.iOTConnector.FilterExp;
import org.group9.iOTConnector.FilterType;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.Minus;
import org.group9.iOTConnector.Mult;
import org.group9.iOTConnector.Num;
import org.group9.iOTConnector.Output;
import org.group9.iOTConnector.Plus;
import org.group9.iOTConnector.ProcessAction;
import org.group9.iOTConnector.Program;
import org.group9.iOTConnector.ReadingName;
import org.group9.iOTConnector.ReadingNameWithConfigScope;
import org.group9.iOTConnector.RelationalOperator;
import org.group9.iOTConnector.Sample;
import org.group9.iOTConnector.SampleAction;
import org.group9.iOTConnector.Send;
import org.group9.iOTConnector.SendAction;
import org.group9.iOTConnector.Sensor;
import org.group9.iOTConnector.SensorConfig;
import org.group9.iOTConnector.TimeUnit;
import org.group9.iOTConnector.Var;
import org.group9.iOTConnector.Webserver;
import org.group9.iOTConnector.Wifi;
import org.group9.services.IOTConnectorGrammarAccess;

@SuppressWarnings("all")
public class IOTConnectorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IOTConnectorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IOTConnectorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IOTConnectorPackage.BITWISE_OPERATOR:
				sequence_BitwiseOperator(context, (BitwiseOperator) semanticObject); 
				return; 
			case IOTConnectorPackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case IOTConnectorPackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case IOTConnectorPackage.DIV:
				sequence_Factor(context, (Div) semanticObject); 
				return; 
			case IOTConnectorPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case IOTConnectorPackage.FILTER_ACTION:
				sequence_FilterAction(context, (FilterAction) semanticObject); 
				return; 
			case IOTConnectorPackage.FILTER_EXP:
				sequence_FilterExp(context, (FilterExp) semanticObject); 
				return; 
			case IOTConnectorPackage.FILTER_TYPE:
				sequence_FilterType(context, (FilterType) semanticObject); 
				return; 
			case IOTConnectorPackage.MINUS:
				sequence_Exp(context, (Minus) semanticObject); 
				return; 
			case IOTConnectorPackage.MULT:
				sequence_Factor(context, (Mult) semanticObject); 
				return; 
			case IOTConnectorPackage.NUM:
				sequence_Number(context, (Num) semanticObject); 
				return; 
			case IOTConnectorPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case IOTConnectorPackage.PLUS:
				sequence_Exp(context, (Plus) semanticObject); 
				return; 
			case IOTConnectorPackage.PROCESS:
				sequence_Process(context, (org.group9.iOTConnector.Process) semanticObject); 
				return; 
			case IOTConnectorPackage.PROCESS_ACTION:
				sequence_ProcessAction(context, (ProcessAction) semanticObject); 
				return; 
			case IOTConnectorPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case IOTConnectorPackage.READING_NAME:
				sequence_ReadingName(context, (ReadingName) semanticObject); 
				return; 
			case IOTConnectorPackage.READING_NAME_WITH_CONFIG_SCOPE:
				sequence_ReadingNameWithConfigScope(context, (ReadingNameWithConfigScope) semanticObject); 
				return; 
			case IOTConnectorPackage.RELATIONAL_OPERATOR:
				sequence_RelationalOperator(context, (RelationalOperator) semanticObject); 
				return; 
			case IOTConnectorPackage.SAMPLE:
				sequence_Sample(context, (Sample) semanticObject); 
				return; 
			case IOTConnectorPackage.SAMPLE_ACTION:
				sequence_SampleAction(context, (SampleAction) semanticObject); 
				return; 
			case IOTConnectorPackage.SEND:
				sequence_Send(context, (Send) semanticObject); 
				return; 
			case IOTConnectorPackage.SEND_ACTION:
				sequence_SendAction(context, (SendAction) semanticObject); 
				return; 
			case IOTConnectorPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case IOTConnectorPackage.SENSOR_CONFIG:
				sequence_SensorConfig(context, (SensorConfig) semanticObject); 
				return; 
			case IOTConnectorPackage.TIME_UNIT:
				sequence_TimeUnit(context, (TimeUnit) semanticObject); 
				return; 
			case IOTConnectorPackage.VAR:
				sequence_Variable(context, (Var) semanticObject); 
				return; 
			case IOTConnectorPackage.WEBSERVER:
				sequence_Webserver(context, (Webserver) semanticObject); 
				return; 
			case IOTConnectorPackage.WIFI:
				sequence_Wifi(context, (Wifi) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BitwiseOperator returns BitwiseOperator
	 *
	 * Constraint:
	 *     (value='AND' | value='OR')
	 */
	protected void sequence_BitwiseOperator(ISerializationContext context, BitwiseOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Board returns Board
	 *
	 * Constraint:
	 *     (name=STRING? sensorConfigs+=SensorConfig* configName=[Config|ID])
	 */
	protected void sequence_Board(ISerializationContext context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Config returns Config
	 *
	 * Constraint:
	 *     (name=ID sensors+=Sensor+)
	 */
	protected void sequence_Config(ISerializationContext context, Config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Minus
	 *     Exp.Plus_1_0_0_1 returns Minus
	 *     Exp.Minus_1_0_1_1 returns Minus
	 *     Factor returns Minus
	 *     Factor.Mult_1_0_0_1 returns Minus
	 *     Factor.Div_1_0_1_1 returns Minus
	 *     Primary returns Minus
	 *     Parenthesis returns Minus
	 *
	 * Constraint:
	 *     (left=Exp_Minus_1_0_1_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Plus
	 *     Exp.Plus_1_0_0_1 returns Plus
	 *     Exp.Minus_1_0_1_1 returns Plus
	 *     Factor returns Plus
	 *     Factor.Mult_1_0_0_1 returns Plus
	 *     Factor.Div_1_0_1_1 returns Plus
	 *     Primary returns Plus
	 *     Parenthesis returns Plus
	 *
	 * Constraint:
	 *     (left=Exp_Plus_1_0_0_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Div
	 *     Exp.Plus_1_0_0_1 returns Div
	 *     Exp.Minus_1_0_1_1 returns Div
	 *     Factor returns Div
	 *     Factor.Mult_1_0_0_1 returns Div
	 *     Factor.Div_1_0_1_1 returns Div
	 *     Primary returns Div
	 *     Parenthesis returns Div
	 *
	 * Constraint:
	 *     (left=Factor_Div_1_0_1_1 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Mult
	 *     Exp.Plus_1_0_0_1 returns Mult
	 *     Exp.Minus_1_0_1_1 returns Mult
	 *     Factor returns Mult
	 *     Factor.Mult_1_0_0_1 returns Mult
	 *     Factor.Div_1_0_1_1 returns Mult
	 *     Primary returns Mult
	 *     Parenthesis returns Mult
	 *
	 * Constraint:
	 *     (left=Factor_Mult_1_0_0_1 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FilterAction returns FilterAction
	 *
	 * Constraint:
	 *     (readingName=[ReadingName|ID] ((filterType=FilterType number=INT) | filterExp=FilterExp))
	 */
	protected void sequence_FilterAction(ISerializationContext context, FilterAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterExp returns FilterExp
	 *
	 * Constraint:
	 *     (readingName=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT (bitwiseOperator=BitwiseOperator filterExp=FilterExp)?)
	 */
	protected void sequence_FilterExp(ISerializationContext context, FilterExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterType returns FilterType
	 *
	 * Constraint:
	 *     (value='medianfilter' | value='meanfilter')
	 */
	protected void sequence_FilterType(ISerializationContext context, FilterType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Filter
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     filterActions+=FilterAction+
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Num
	 *     Exp.Plus_1_0_0_1 returns Num
	 *     Exp.Minus_1_0_1_1 returns Num
	 *     Factor returns Num
	 *     Factor.Mult_1_0_0_1 returns Num
	 *     Factor.Div_1_0_1_1 returns Num
	 *     Primary returns Num
	 *     Number returns Num
	 *     Parenthesis returns Num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (readingNames+=ReadingName readingNames+=ReadingName*)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessAction returns ProcessAction
	 *
	 * Constraint:
	 *     (readingName=[ReadingName|ID] exp=Exp)
	 */
	protected void sequence_ProcessAction(ISerializationContext context, ProcessAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.PROCESS_ACTION__READING_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.PROCESS_ACTION__READING_NAME));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.PROCESS_ACTION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.PROCESS_ACTION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessActionAccess().getReadingNameReadingNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(IOTConnectorPackage.Literals.PROCESS_ACTION__READING_NAME, false));
		feeder.accept(grammarAccess.getProcessActionAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Process
	 *     Process returns Process
	 *
	 * Constraint:
	 *     processActions+=ProcessAction+
	 */
	protected void sequence_Process(ISerializationContext context, org.group9.iOTConnector.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (webserver=Webserver wifis+=Wifi+ configs+=Config+ boards+=Board+)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReadingNameWithConfigScope returns ReadingNameWithConfigScope
	 *
	 * Constraint:
	 *     name=[ReadingName|ID]
	 */
	protected void sequence_ReadingNameWithConfigScope(ISerializationContext context, ReadingNameWithConfigScope semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.READING_NAME_WITH_CONFIG_SCOPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.READING_NAME_WITH_CONFIG_SCOPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadingNameWithConfigScopeAccess().getNameReadingNameIDTerminalRuleCall_0_1(), semanticObject.eGet(IOTConnectorPackage.Literals.READING_NAME_WITH_CONFIG_SCOPE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReadingName returns ReadingName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReadingName(ISerializationContext context, ReadingName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.READING_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.READING_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadingNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationalOperator returns RelationalOperator
	 *
	 * Constraint:
	 *     (
	 *         value='>' | 
	 *         value='>=' | 
	 *         value='==' | 
	 *         value='<=' | 
	 *         value='<' | 
	 *         value='!='
	 *     )
	 */
	protected void sequence_RelationalOperator(ISerializationContext context, RelationalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SampleAction returns SampleAction
	 *
	 * Constraint:
	 *     (
	 *         readingName=[ReadingName|ID] 
	 *         (readingNameToCompare=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT)? 
	 *         amountOfTime=INT 
	 *         timeUnit=TimeUnit
	 *     )
	 */
	protected void sequence_SampleAction(ISerializationContext context, SampleAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Sample
	 *     Sample returns Sample
	 *
	 * Constraint:
	 *     sampleActions+=SampleAction+
	 */
	protected void sequence_Sample(ISerializationContext context, Sample semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SendAction returns SendAction
	 *
	 * Constraint:
	 *     (readingName=[ReadingName|ID] relationalOperator=RelationalOperator number=INT)
	 */
	protected void sequence_SendAction(ISerializationContext context, SendAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__READING_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__READING_NAME));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__RELATIONAL_OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__RELATIONAL_OPERATOR));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.SEND_ACTION__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendActionAccess().getReadingNameReadingNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(IOTConnectorPackage.Literals.SEND_ACTION__READING_NAME, false));
		feeder.accept(grammarAccess.getSendActionAccess().getRelationalOperatorRelationalOperatorParserRuleCall_3_0(), semanticObject.getRelationalOperator());
		feeder.accept(grammarAccess.getSendActionAccess().getNumberINTTerminalRuleCall_4_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Send returns Send
	 *
	 * Constraint:
	 *     sendActions+=SendAction+
	 */
	protected void sequence_Send(ISerializationContext context, Send semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SensorConfig returns SensorConfig
	 *
	 * Constraint:
	 *     (name=SensorName (pinIn=STRING pinOut=STRING)?)
	 */
	protected void sequence_SensorConfig(ISerializationContext context, SensorConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=SensorName type='external'? output=Output functions+=Function+ send=Send)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeUnit returns TimeUnit
	 *
	 * Constraint:
	 *     (
	 *         value='millisecond' | 
	 *         value='second' | 
	 *         value='minute' | 
	 *         value='ms' | 
	 *         value='s' | 
	 *         value='m'
	 *     )
	 */
	protected void sequence_TimeUnit(ISerializationContext context, TimeUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Var
	 *     Exp.Plus_1_0_0_1 returns Var
	 *     Exp.Minus_1_0_1_1 returns Var
	 *     Factor returns Var
	 *     Factor.Mult_1_0_0_1 returns Var
	 *     Factor.Div_1_0_1_1 returns Var
	 *     Primary returns Var
	 *     Parenthesis returns Var
	 *     Variable returns Var
	 *
	 * Constraint:
	 *     readingName=ReadingNameWithConfigScope
	 */
	protected void sequence_Variable(ISerializationContext context, Var semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.VAR__READING_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.VAR__READING_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getReadingNameReadingNameWithConfigScopeParserRuleCall_1_0(), semanticObject.getReadingName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Webserver returns Webserver
	 *
	 * Constraint:
	 *     (url=STRING port=INT)
	 */
	protected void sequence_Webserver(ISerializationContext context, Webserver semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.WEBSERVER__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.WEBSERVER__URL));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.WEBSERVER__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.WEBSERVER__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWebserverAccess().getUrlSTRINGTerminalRuleCall_5_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getWebserverAccess().getPortINTTerminalRuleCall_9_0(), semanticObject.getPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Wifi returns Wifi
	 *
	 * Constraint:
	 *     (ssid=STRING password=STRING)
	 */
	protected void sequence_Wifi(ISerializationContext context, Wifi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.WIFI__SSID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.WIFI__SSID));
			if (transientValues.isValueTransient(semanticObject, IOTConnectorPackage.Literals.WIFI__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IOTConnectorPackage.Literals.WIFI__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWifiAccess().getSsidSTRINGTerminalRuleCall_5_0(), semanticObject.getSsid());
		feeder.accept(grammarAccess.getWifiAccess().getPasswordSTRINGTerminalRuleCall_9_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
}

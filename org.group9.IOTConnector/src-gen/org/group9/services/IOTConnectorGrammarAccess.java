/*
 * generated by Xtext 2.21.0
 */
package org.group9.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IOTConnectorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWebserverAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWebserverWebserverParserRuleCall_0_0 = (RuleCall)cWebserverAssignment_0.eContents().get(0);
		private final Assignment cWifisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWifisWifiParserRuleCall_1_0 = (RuleCall)cWifisAssignment_1.eContents().get(0);
		private final Assignment cConfigsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigsConfigParserRuleCall_2_0 = (RuleCall)cConfigsAssignment_2.eContents().get(0);
		private final Assignment cBoardsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoardsBoardParserRuleCall_3_0 = (RuleCall)cBoardsAssignment_3.eContents().get(0);
		
		//Program:
		//	webserver=Webserver wifis+=Wifi+ configs+=Config+ boards+=Board+;
		@Override public ParserRule getRule() { return rule; }
		
		//webserver=Webserver wifis+=Wifi+ configs+=Config+ boards+=Board+
		public Group getGroup() { return cGroup; }
		
		//webserver=Webserver
		public Assignment getWebserverAssignment_0() { return cWebserverAssignment_0; }
		
		//Webserver
		public RuleCall getWebserverWebserverParserRuleCall_0_0() { return cWebserverWebserverParserRuleCall_0_0; }
		
		//wifis+=Wifi+
		public Assignment getWifisAssignment_1() { return cWifisAssignment_1; }
		
		//Wifi
		public RuleCall getWifisWifiParserRuleCall_1_0() { return cWifisWifiParserRuleCall_1_0; }
		
		//configs+=Config+
		public Assignment getConfigsAssignment_2() { return cConfigsAssignment_2; }
		
		//Config
		public RuleCall getConfigsConfigParserRuleCall_2_0() { return cConfigsConfigParserRuleCall_2_0; }
		
		//boards+=Board+
		public Assignment getBoardsAssignment_3() { return cBoardsAssignment_3; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_3_0() { return cBoardsBoardParserRuleCall_3_0; }
	}
	public class WebserverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Webserver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWebserverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHostKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUrlAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUrlSTRINGTerminalRuleCall_5_0 = (RuleCall)cUrlAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPortKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cIsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPortINTTerminalRuleCall_9_0 = (RuleCall)cPortAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Webserver:
		//	'define' 'webserver' '(' 'host' 'is' url=STRING ',' 'port' 'is' port=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'define' 'webserver' '(' 'host' 'is' url=STRING ',' 'port' 'is' port=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//'webserver'
		public Keyword getWebserverKeyword_1() { return cWebserverKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'host'
		public Keyword getHostKeyword_3() { return cHostKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//url=STRING
		public Assignment getUrlAssignment_5() { return cUrlAssignment_5; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_5_0() { return cUrlSTRINGTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'port'
		public Keyword getPortKeyword_7() { return cPortKeyword_7; }
		
		//'is'
		public Keyword getIsKeyword_8() { return cIsKeyword_8; }
		
		//port=INT
		public Assignment getPortAssignment_9() { return cPortAssignment_9; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_9_0() { return cPortINTTerminalRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class WifiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Wifi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWifiKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSsidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSsidAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSsidSTRINGTerminalRuleCall_5_0 = (RuleCall)cSsidAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPasswordKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cIsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPasswordAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_9_0 = (RuleCall)cPasswordAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Wifi:
		//	'define' 'wifi' '(' 'ssid' 'is' ssid=STRING ',' 'password' 'is' password=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'define' 'wifi' '(' 'ssid' 'is' ssid=STRING ',' 'password' 'is' password=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//'wifi'
		public Keyword getWifiKeyword_1() { return cWifiKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'ssid'
		public Keyword getSsidKeyword_3() { return cSsidKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//ssid=STRING
		public Assignment getSsidAssignment_5() { return cSsidAssignment_5; }
		
		//STRING
		public RuleCall getSsidSTRINGTerminalRuleCall_5_0() { return cSsidSTRINGTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'password'
		public Keyword getPasswordKeyword_7() { return cPasswordKeyword_7; }
		
		//'is'
		public Keyword getIsKeyword_8() { return cIsKeyword_8; }
		
		//password=STRING
		public Assignment getPasswordAssignment_9() { return cPasswordAssignment_9; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_9_0() { return cPasswordSTRINGTerminalRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSensorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSensorsSensorParserRuleCall_2_0 = (RuleCall)cSensorsAssignment_2.eContents().get(0);
		
		//Config:
		//	'config' name=ID sensors+=Sensor+;
		@Override public ParserRule getRule() { return rule; }
		
		//'config' name=ID sensors+=Sensor+
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//sensors+=Sensor+
		public Assignment getSensorsAssignment_2() { return cSensorsAssignment_2; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_2_0() { return cSensorsSensorParserRuleCall_2_0; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cIdKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cIsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSensorConfigsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSensorConfigsSensorConfigParserRuleCall_2_0 = (RuleCall)cSensorConfigsAssignment_2.eContents().get(0);
		private final Keyword cUseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConfigKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConfigNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cConfigNameConfigCrossReference_5_0 = (CrossReference)cConfigNameAssignment_5.eContents().get(0);
		private final RuleCall cConfigNameConfigIDTerminalRuleCall_5_0_1 = (RuleCall)cConfigNameConfigCrossReference_5_0.eContents().get(1);
		
		//Board:
		//	'board' ('(' 'id' 'is' name=STRING ')')? sensorConfigs+=SensorConfig* 'use' 'config' configName=[Config];
		@Override public ParserRule getRule() { return rule; }
		
		//'board' ('(' 'id' 'is' name=STRING ')')? sensorConfigs+=SensorConfig* 'use' 'config' configName=[Config]
		public Group getGroup() { return cGroup; }
		
		//'board'
		public Keyword getBoardKeyword_0() { return cBoardKeyword_0; }
		
		//('(' 'id' 'is' name=STRING ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'id'
		public Keyword getIdKeyword_1_1() { return cIdKeyword_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_2() { return cIsKeyword_1_2; }
		
		//name=STRING
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_3_0() { return cNameSTRINGTerminalRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//sensorConfigs+=SensorConfig*
		public Assignment getSensorConfigsAssignment_2() { return cSensorConfigsAssignment_2; }
		
		//SensorConfig
		public RuleCall getSensorConfigsSensorConfigParserRuleCall_2_0() { return cSensorConfigsSensorConfigParserRuleCall_2_0; }
		
		//'use'
		public Keyword getUseKeyword_3() { return cUseKeyword_3; }
		
		//'config'
		public Keyword getConfigKeyword_4() { return cConfigKeyword_4; }
		
		//configName=[Config]
		public Assignment getConfigNameAssignment_5() { return cConfigNameAssignment_5; }
		
		//[Config]
		public CrossReference getConfigNameConfigCrossReference_5_0() { return cConfigNameConfigCrossReference_5_0; }
		
		//ID
		public RuleCall getConfigNameConfigIDTerminalRuleCall_5_0_1() { return cConfigNameConfigIDTerminalRuleCall_5_0_1; }
	}
	public class SensorConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.SensorConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSensorNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExternalKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPinKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cInKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cIsKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cPinInAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cPinInSTRINGTerminalRuleCall_2_5_0 = (RuleCall)cPinInAssignment_2_5.eContents().get(0);
		private final Keyword cCommaKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Keyword cPinKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Keyword cOutKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Keyword cIsKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		private final Assignment cPinOutAssignment_2_10 = (Assignment)cGroup_2.eContents().get(10);
		private final RuleCall cPinOutSTRINGTerminalRuleCall_2_10_0 = (RuleCall)cPinOutAssignment_2_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_11 = (Keyword)cGroup_2.eContents().get(11);
		
		//SensorConfig:
		//	'sensor' name=SensorName ('external' '(' 'pin' 'in' 'is' pinIn=STRING ',' 'pin' 'out' 'is' pinOut=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=SensorName ('external' '(' 'pin' 'in' 'is' pinIn=STRING ',' 'pin' 'out' 'is' pinOut=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=SensorName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SensorName
		public RuleCall getNameSensorNameParserRuleCall_1_0() { return cNameSensorNameParserRuleCall_1_0; }
		
		//('external' '(' 'pin' 'in' 'is' pinIn=STRING ',' 'pin' 'out' 'is' pinOut=STRING ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'external'
		public Keyword getExternalKeyword_2_0() { return cExternalKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//'pin'
		public Keyword getPinKeyword_2_2() { return cPinKeyword_2_2; }
		
		//'in'
		public Keyword getInKeyword_2_3() { return cInKeyword_2_3; }
		
		//'is'
		public Keyword getIsKeyword_2_4() { return cIsKeyword_2_4; }
		
		//pinIn=STRING
		public Assignment getPinInAssignment_2_5() { return cPinInAssignment_2_5; }
		
		//STRING
		public RuleCall getPinInSTRINGTerminalRuleCall_2_5_0() { return cPinInSTRINGTerminalRuleCall_2_5_0; }
		
		//','
		public Keyword getCommaKeyword_2_6() { return cCommaKeyword_2_6; }
		
		//'pin'
		public Keyword getPinKeyword_2_7() { return cPinKeyword_2_7; }
		
		//'out'
		public Keyword getOutKeyword_2_8() { return cOutKeyword_2_8; }
		
		//'is'
		public Keyword getIsKeyword_2_9() { return cIsKeyword_2_9; }
		
		//pinOut=STRING
		public Assignment getPinOutAssignment_2_10() { return cPinOutAssignment_2_10; }
		
		//STRING
		public RuleCall getPinOutSTRINGTerminalRuleCall_2_10_0() { return cPinOutSTRINGTerminalRuleCall_2_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_11() { return cRightParenthesisKeyword_2_11; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSensorNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cTypeExternalKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		private final Assignment cOutputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutputOutputParserRuleCall_3_0 = (RuleCall)cOutputAssignment_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionsFunctionParserRuleCall_4_0 = (RuleCall)cFunctionsAssignment_4.eContents().get(0);
		private final Assignment cSendAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSendSendParserRuleCall_5_0 = (RuleCall)cSendAssignment_5.eContents().get(0);
		
		//Sensor:
		//	'sensor' name=SensorName type='external'? output=Output functions+=Function+ send=Send;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=SensorName type='external'? output=Output functions+=Function+ send=Send
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=SensorName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SensorName
		public RuleCall getNameSensorNameParserRuleCall_1_0() { return cNameSensorNameParserRuleCall_1_0; }
		
		//type='external'?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//'external'
		public Keyword getTypeExternalKeyword_2_0() { return cTypeExternalKeyword_2_0; }
		
		//output=Output
		public Assignment getOutputAssignment_3() { return cOutputAssignment_3; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_3_0() { return cOutputOutputParserRuleCall_3_0; }
		
		//functions+=Function+
		public Assignment getFunctionsAssignment_4() { return cFunctionsAssignment_4; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_4_0() { return cFunctionsFunctionParserRuleCall_4_0; }
		
		//send=Send
		public Assignment getSendAssignment_5() { return cSendAssignment_5; }
		
		//Send
		public RuleCall getSendSendParserRuleCall_5_0() { return cSendSendParserRuleCall_5_0; }
	}
	public class SensorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.SensorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLightKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTemperatureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SensorName:
		//	'light' | 'temperature';
		@Override public ParserRule getRule() { return rule; }
		
		//'light' | 'temperature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'light'
		public Keyword getLightKeyword_0() { return cLightKeyword_0; }
		
		//'temperature'
		public Keyword getTemperatureKeyword_1() { return cTemperatureKeyword_1; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReadingNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReadingNamesReadingNameParserRuleCall_1_0 = (RuleCall)cReadingNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReadingNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReadingNamesReadingNameParserRuleCall_2_1_0 = (RuleCall)cReadingNamesAssignment_2_1.eContents().get(0);
		
		//Output:
		//	'output' readingNames+=ReadingName (',' readingNames+=ReadingName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'output' readingNames+=ReadingName (',' readingNames+=ReadingName)*
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//readingNames+=ReadingName
		public Assignment getReadingNamesAssignment_1() { return cReadingNamesAssignment_1; }
		
		//ReadingName
		public RuleCall getReadingNamesReadingNameParserRuleCall_1_0() { return cReadingNamesReadingNameParserRuleCall_1_0; }
		
		//(',' readingNames+=ReadingName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//readingNames+=ReadingName
		public Assignment getReadingNamesAssignment_2_1() { return cReadingNamesAssignment_2_1; }
		
		//ReadingName
		public RuleCall getReadingNamesReadingNameParserRuleCall_2_1_0() { return cReadingNamesReadingNameParserRuleCall_2_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSampleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Function:
		//	Sample | Filter | Process;
		@Override public ParserRule getRule() { return rule; }
		
		//Sample | Filter | Process
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sample
		public RuleCall getSampleParserRuleCall_0() { return cSampleParserRuleCall_0; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_1() { return cFilterParserRuleCall_1; }
		
		//Process
		public RuleCall getProcessParserRuleCall_2() { return cProcessParserRuleCall_2; }
	}
	public class SampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Sample");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSampleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSampleActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSampleActionsSampleActionParserRuleCall_1_0 = (RuleCall)cSampleActionsAssignment_1.eContents().get(0);
		
		//Sample:
		//	'sample' sampleActions+=SampleAction+;
		@Override public ParserRule getRule() { return rule; }
		
		//'sample' sampleActions+=SampleAction+
		public Group getGroup() { return cGroup; }
		
		//'sample'
		public Keyword getSampleKeyword_0() { return cSampleKeyword_0; }
		
		//sampleActions+=SampleAction+
		public Assignment getSampleActionsAssignment_1() { return cSampleActionsAssignment_1; }
		
		//SampleAction
		public RuleCall getSampleActionsSampleActionParserRuleCall_1_0() { return cSampleActionsSampleActionParserRuleCall_1_0; }
	}
	public class SampleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.SampleAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReadingNameReadingNameCrossReference_0_0 = (CrossReference)cReadingNameAssignment_0.eContents().get(0);
		private final RuleCall cReadingNameReadingNameIDTerminalRuleCall_0_0_1 = (RuleCall)cReadingNameReadingNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReadingNameToCompareAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReadingNameToCompareReadingNameWithConfigScopeParserRuleCall_1_1_0 = (RuleCall)cReadingNameToCompareAssignment_1_1.eContents().get(0);
		private final Assignment cRelationalOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelationalOperatorRelationalOperatorParserRuleCall_1_2_0 = (RuleCall)cRelationalOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cNumberAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNumberINTTerminalRuleCall_1_3_0 = (RuleCall)cNumberAssignment_1_3.eContents().get(0);
		private final Keyword cEveryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAmountOfTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountOfTimeINTTerminalRuleCall_3_0 = (RuleCall)cAmountOfTimeAssignment_3.eContents().get(0);
		private final Assignment cTimeUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_4_0 = (RuleCall)cTimeUnitAssignment_4.eContents().get(0);
		
		//SampleAction:
		//	readingName=[ReadingName] ('when' readingNameToCompare=ReadingNameWithConfigScope
		//	relationalOperator=RelationalOperator number=INT)? 'every' amountOfTime=INT timeUnit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//readingName=[ReadingName] ('when' readingNameToCompare=ReadingNameWithConfigScope relationalOperator=RelationalOperator
		//number=INT)? 'every' amountOfTime=INT timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//readingName=[ReadingName]
		public Assignment getReadingNameAssignment_0() { return cReadingNameAssignment_0; }
		
		//[ReadingName]
		public CrossReference getReadingNameReadingNameCrossReference_0_0() { return cReadingNameReadingNameCrossReference_0_0; }
		
		//ID
		public RuleCall getReadingNameReadingNameIDTerminalRuleCall_0_0_1() { return cReadingNameReadingNameIDTerminalRuleCall_0_0_1; }
		
		//('when' readingNameToCompare=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//readingNameToCompare=ReadingNameWithConfigScope
		public Assignment getReadingNameToCompareAssignment_1_1() { return cReadingNameToCompareAssignment_1_1; }
		
		//ReadingNameWithConfigScope
		public RuleCall getReadingNameToCompareReadingNameWithConfigScopeParserRuleCall_1_1_0() { return cReadingNameToCompareReadingNameWithConfigScopeParserRuleCall_1_1_0; }
		
		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_1_2() { return cRelationalOperatorAssignment_1_2; }
		
		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorParserRuleCall_1_2_0() { return cRelationalOperatorRelationalOperatorParserRuleCall_1_2_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1_3() { return cNumberAssignment_1_3; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_3_0() { return cNumberINTTerminalRuleCall_1_3_0; }
		
		//'every'
		public Keyword getEveryKeyword_2() { return cEveryKeyword_2; }
		
		//amountOfTime=INT
		public Assignment getAmountOfTimeAssignment_3() { return cAmountOfTimeAssignment_3; }
		
		//INT
		public RuleCall getAmountOfTimeINTTerminalRuleCall_3_0() { return cAmountOfTimeINTTerminalRuleCall_3_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_4() { return cTimeUnitAssignment_4; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_4_0() { return cTimeUnitTimeUnitParserRuleCall_4_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilterActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterActionsFilterActionParserRuleCall_1_0 = (RuleCall)cFilterActionsAssignment_1.eContents().get(0);
		
		//Filter:
		//	'filter' filterActions+=FilterAction+;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' filterActions+=FilterAction+
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//filterActions+=FilterAction+
		public Assignment getFilterActionsAssignment_1() { return cFilterActionsAssignment_1; }
		
		//FilterAction
		public RuleCall getFilterActionsFilterActionParserRuleCall_1_0() { return cFilterActionsFilterActionParserRuleCall_1_0; }
	}
	public class FilterActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.FilterAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReadingNameReadingNameCrossReference_0_0 = (CrossReference)cReadingNameAssignment_0.eContents().get(0);
		private final RuleCall cReadingNameReadingNameIDTerminalRuleCall_0_0_1 = (RuleCall)cReadingNameReadingNameCrossReference_0_0.eContents().get(1);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cFilterTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cFilterTypeFilterTypeParserRuleCall_2_0_0_0 = (RuleCall)cFilterTypeAssignment_2_0_0.eContents().get(0);
		private final Keyword cWithKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cNumberAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_2_0_2_0 = (RuleCall)cNumberAssignment_2_0_2.eContents().get(0);
		private final Keyword cValuesKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cFilterExpAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFilterExpFilterExpParserRuleCall_2_1_0 = (RuleCall)cFilterExpAssignment_2_1.eContents().get(0);
		
		//FilterAction:
		//	readingName=[ReadingName] 'use' (filterType=FilterType 'with' number=INT 'values' | filterExp=FilterExp);
		@Override public ParserRule getRule() { return rule; }
		
		//readingName=[ReadingName] 'use' (filterType=FilterType 'with' number=INT 'values' | filterExp=FilterExp)
		public Group getGroup() { return cGroup; }
		
		//readingName=[ReadingName]
		public Assignment getReadingNameAssignment_0() { return cReadingNameAssignment_0; }
		
		//[ReadingName]
		public CrossReference getReadingNameReadingNameCrossReference_0_0() { return cReadingNameReadingNameCrossReference_0_0; }
		
		//ID
		public RuleCall getReadingNameReadingNameIDTerminalRuleCall_0_0_1() { return cReadingNameReadingNameIDTerminalRuleCall_0_0_1; }
		
		//'use'
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }
		
		//(filterType=FilterType 'with' number=INT 'values' | filterExp=FilterExp)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//filterType=FilterType 'with' number=INT 'values'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//filterType=FilterType
		public Assignment getFilterTypeAssignment_2_0_0() { return cFilterTypeAssignment_2_0_0; }
		
		//FilterType
		public RuleCall getFilterTypeFilterTypeParserRuleCall_2_0_0_0() { return cFilterTypeFilterTypeParserRuleCall_2_0_0_0; }
		
		//'with'
		public Keyword getWithKeyword_2_0_1() { return cWithKeyword_2_0_1; }
		
		//number=INT
		public Assignment getNumberAssignment_2_0_2() { return cNumberAssignment_2_0_2; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_0_2_0() { return cNumberINTTerminalRuleCall_2_0_2_0; }
		
		//'values'
		public Keyword getValuesKeyword_2_0_3() { return cValuesKeyword_2_0_3; }
		
		//filterExp=FilterExp
		public Assignment getFilterExpAssignment_2_1() { return cFilterExpAssignment_2_1; }
		
		//FilterExp
		public RuleCall getFilterExpFilterExpParserRuleCall_2_1_0() { return cFilterExpFilterExpParserRuleCall_2_1_0; }
	}
	public class FilterExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.FilterExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReadingNameReadingNameWithConfigScopeParserRuleCall_0_0 = (RuleCall)cReadingNameAssignment_0.eContents().get(0);
		private final Assignment cRelationalOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationalOperatorRelationalOperatorParserRuleCall_1_0 = (RuleCall)cRelationalOperatorAssignment_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cBitwiseOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cBitwiseOperatorBitwiseOperatorParserRuleCall_3_0_0 = (RuleCall)cBitwiseOperatorAssignment_3_0.eContents().get(0);
		private final Assignment cFilterExpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilterExpFilterExpParserRuleCall_3_1_0 = (RuleCall)cFilterExpAssignment_3_1.eContents().get(0);
		
		//FilterExp:
		//	readingName=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT
		//	(bitwiseOperator=BitwiseOperator filterExp=FilterExp)?;
		@Override public ParserRule getRule() { return rule; }
		
		//readingName=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT (bitwiseOperator=BitwiseOperator
		//filterExp=FilterExp)?
		public Group getGroup() { return cGroup; }
		
		//readingName=ReadingNameWithConfigScope
		public Assignment getReadingNameAssignment_0() { return cReadingNameAssignment_0; }
		
		//ReadingNameWithConfigScope
		public RuleCall getReadingNameReadingNameWithConfigScopeParserRuleCall_0_0() { return cReadingNameReadingNameWithConfigScopeParserRuleCall_0_0; }
		
		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_1() { return cRelationalOperatorAssignment_1; }
		
		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorParserRuleCall_1_0() { return cRelationalOperatorRelationalOperatorParserRuleCall_1_0; }
		
		//number=INT
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_0() { return cNumberINTTerminalRuleCall_2_0; }
		
		//(bitwiseOperator=BitwiseOperator filterExp=FilterExp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//bitwiseOperator=BitwiseOperator
		public Assignment getBitwiseOperatorAssignment_3_0() { return cBitwiseOperatorAssignment_3_0; }
		
		//BitwiseOperator
		public RuleCall getBitwiseOperatorBitwiseOperatorParserRuleCall_3_0_0() { return cBitwiseOperatorBitwiseOperatorParserRuleCall_3_0_0; }
		
		//filterExp=FilterExp
		public Assignment getFilterExpAssignment_3_1() { return cFilterExpAssignment_3_1; }
		
		//FilterExp
		public RuleCall getFilterExpFilterExpParserRuleCall_3_1_0() { return cFilterExpFilterExpParserRuleCall_3_1_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessActionsProcessActionParserRuleCall_1_0 = (RuleCall)cProcessActionsAssignment_1.eContents().get(0);
		
		//Process:
		//	'process' processActions+=ProcessAction+;
		@Override public ParserRule getRule() { return rule; }
		
		//'process' processActions+=ProcessAction+
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//processActions+=ProcessAction+
		public Assignment getProcessActionsAssignment_1() { return cProcessActionsAssignment_1; }
		
		//ProcessAction
		public RuleCall getProcessActionsProcessActionParserRuleCall_1_0() { return cProcessActionsProcessActionParserRuleCall_1_0; }
	}
	public class ProcessActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.ProcessAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReadingNameReadingNameCrossReference_0_0 = (CrossReference)cReadingNameAssignment_0.eContents().get(0);
		private final RuleCall cReadingNameReadingNameIDTerminalRuleCall_0_0_1 = (RuleCall)cReadingNameReadingNameCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//ProcessAction:
		//	readingName=[ReadingName] 'is' exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//readingName=[ReadingName] 'is' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//readingName=[ReadingName]
		public Assignment getReadingNameAssignment_0() { return cReadingNameAssignment_0; }
		
		//[ReadingName]
		public CrossReference getReadingNameReadingNameCrossReference_0_0() { return cReadingNameReadingNameCrossReference_0_0; }
		
		//ID
		public RuleCall getReadingNameReadingNameIDTerminalRuleCall_0_0_1() { return cReadingNameReadingNameIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp Expression:
		//	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current} | '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor Expression:
		//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	Number | Parenthesis | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number Expression:
		//	{Num} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Num}
		public Action getNumAction_0() { return cNumAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis Expression:
		//	'(' Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReadingNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReadingNameReadingNameWithConfigScopeParserRuleCall_1_0 = (RuleCall)cReadingNameAssignment_1.eContents().get(0);
		
		//Variable Expression:
		//	{Var} readingName=ReadingNameWithConfigScope;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} readingName=ReadingNameWithConfigScope
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//readingName=ReadingNameWithConfigScope
		public Assignment getReadingNameAssignment_1() { return cReadingNameAssignment_1; }
		
		//ReadingNameWithConfigScope
		public RuleCall getReadingNameReadingNameWithConfigScopeParserRuleCall_1_0() { return cReadingNameReadingNameWithConfigScopeParserRuleCall_1_0; }
	}
	public class SendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.Send");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSendActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSendActionsSendActionParserRuleCall_1_0 = (RuleCall)cSendActionsAssignment_1.eContents().get(0);
		
		//Send:
		//	'send' sendActions+=SendAction+;
		@Override public ParserRule getRule() { return rule; }
		
		//'send' sendActions+=SendAction+
		public Group getGroup() { return cGroup; }
		
		//'send'
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//sendActions+=SendAction+
		public Assignment getSendActionsAssignment_1() { return cSendActionsAssignment_1; }
		
		//SendAction
		public RuleCall getSendActionsSendActionParserRuleCall_1_0() { return cSendActionsSendActionParserRuleCall_1_0; }
	}
	public class SendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.SendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadingNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReadingNameReadingNameCrossReference_0_0 = (CrossReference)cReadingNameAssignment_0.eContents().get(0);
		private final RuleCall cReadingNameReadingNameIDTerminalRuleCall_0_0_1 = (RuleCall)cReadingNameReadingNameCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSamplesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationalOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationalOperatorRelationalOperatorParserRuleCall_3_0 = (RuleCall)cRelationalOperatorAssignment_3.eContents().get(0);
		private final Assignment cNumberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumberINTTerminalRuleCall_4_0 = (RuleCall)cNumberAssignment_4.eContents().get(0);
		
		//SendAction:
		//	readingName=[ReadingName] 'when' 'samples' relationalOperator=RelationalOperator number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//readingName=[ReadingName] 'when' 'samples' relationalOperator=RelationalOperator number=INT
		public Group getGroup() { return cGroup; }
		
		//readingName=[ReadingName]
		public Assignment getReadingNameAssignment_0() { return cReadingNameAssignment_0; }
		
		//[ReadingName]
		public CrossReference getReadingNameReadingNameCrossReference_0_0() { return cReadingNameReadingNameCrossReference_0_0; }
		
		//ID
		public RuleCall getReadingNameReadingNameIDTerminalRuleCall_0_0_1() { return cReadingNameReadingNameIDTerminalRuleCall_0_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'samples'
		public Keyword getSamplesKeyword_2() { return cSamplesKeyword_2; }
		
		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_3() { return cRelationalOperatorAssignment_3; }
		
		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorParserRuleCall_3_0() { return cRelationalOperatorRelationalOperatorParserRuleCall_3_0; }
		
		//number=INT
		public Assignment getNumberAssignment_4() { return cNumberAssignment_4; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_4_0() { return cNumberINTTerminalRuleCall_4_0; }
	}
	public class ReadingNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.ReadingName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ReadingName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ReadingNameWithConfigScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.ReadingNameWithConfigScope");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameReadingNameCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameReadingNameIDTerminalRuleCall_0_1 = (RuleCall)cNameReadingNameCrossReference_0.eContents().get(1);
		
		//ReadingNameWithConfigScope:
		//	name=[ReadingName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ReadingName]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[ReadingName]
		public CrossReference getNameReadingNameCrossReference_0() { return cNameReadingNameCrossReference_0; }
		
		//ID
		public RuleCall getNameReadingNameIDTerminalRuleCall_0_1() { return cNameReadingNameIDTerminalRuleCall_0_1; }
	}
	public class BitwiseOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.BitwiseOperator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueANDKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueORKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BitwiseOperator:
		//	value=('AND' | 'OR');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('AND' | 'OR')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('AND' | 'OR')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'AND'
		public Keyword getValueANDKeyword_0_0() { return cValueANDKeyword_0_0; }
		
		//'OR'
		public Keyword getValueORKeyword_0_1() { return cValueORKeyword_0_1; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.RelationalOperator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueGreaterThanSignKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueGreaterThanSignEqualsSignKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueEqualsSignEqualsSignKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueLessThanSignEqualsSignKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueLessThanSignKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueExclamationMarkEqualsSignKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		
		//RelationalOperator:
		//	value=('>' | '>=' | '==' | '<=' | '<' | '!=');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('>' | '>=' | '==' | '<=' | '<' | '!=')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('>' | '>=' | '==' | '<=' | '<' | '!=')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'>'
		public Keyword getValueGreaterThanSignKeyword_0_0() { return cValueGreaterThanSignKeyword_0_0; }
		
		//'>='
		public Keyword getValueGreaterThanSignEqualsSignKeyword_0_1() { return cValueGreaterThanSignEqualsSignKeyword_0_1; }
		
		//'=='
		public Keyword getValueEqualsSignEqualsSignKeyword_0_2() { return cValueEqualsSignEqualsSignKeyword_0_2; }
		
		//'<='
		public Keyword getValueLessThanSignEqualsSignKeyword_0_3() { return cValueLessThanSignEqualsSignKeyword_0_3; }
		
		//'<'
		public Keyword getValueLessThanSignKeyword_0_4() { return cValueLessThanSignKeyword_0_4; }
		
		//'!='
		public Keyword getValueExclamationMarkEqualsSignKeyword_0_5() { return cValueExclamationMarkEqualsSignKeyword_0_5; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.TimeUnit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueMillisecondKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueSecondKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueMinuteKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueMsKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueSKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueMKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		
		//TimeUnit:
		//	value=('millisecond' | 'second' | 'minute' | 'ms' | 's' | 'm');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('millisecond' | 'second' | 'minute' | 'ms' | 's' | 'm')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('millisecond' | 'second' | 'minute' | 'ms' | 's' | 'm')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'millisecond'
		public Keyword getValueMillisecondKeyword_0_0() { return cValueMillisecondKeyword_0_0; }
		
		//'second'
		public Keyword getValueSecondKeyword_0_1() { return cValueSecondKeyword_0_1; }
		
		//'minute'
		public Keyword getValueMinuteKeyword_0_2() { return cValueMinuteKeyword_0_2; }
		
		//'ms'
		public Keyword getValueMsKeyword_0_3() { return cValueMsKeyword_0_3; }
		
		//'s'
		public Keyword getValueSKeyword_0_4() { return cValueSKeyword_0_4; }
		
		//'m'
		public Keyword getValueMKeyword_0_5() { return cValueMKeyword_0_5; }
	}
	public class FilterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.group9.IOTConnector.FilterType");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueMedianfilterKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueMeanfilterKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//FilterType:
		//	value=('medianfilter' | 'meanfilter');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('medianfilter' | 'meanfilter')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('medianfilter' | 'meanfilter')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'medianfilter'
		public Keyword getValueMedianfilterKeyword_0_0() { return cValueMedianfilterKeyword_0_0; }
		
		//'meanfilter'
		public Keyword getValueMeanfilterKeyword_0_1() { return cValueMeanfilterKeyword_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final WebserverElements pWebserver;
	private final WifiElements pWifi;
	private final ConfigElements pConfig;
	private final BoardElements pBoard;
	private final SensorConfigElements pSensorConfig;
	private final SensorElements pSensor;
	private final SensorNameElements pSensorName;
	private final OutputElements pOutput;
	private final FunctionElements pFunction;
	private final SampleElements pSample;
	private final SampleActionElements pSampleAction;
	private final FilterElements pFilter;
	private final FilterActionElements pFilterAction;
	private final FilterExpElements pFilterExp;
	private final ProcessElements pProcess;
	private final ProcessActionElements pProcessAction;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final NumberElements pNumber;
	private final ParenthesisElements pParenthesis;
	private final VariableElements pVariable;
	private final SendElements pSend;
	private final SendActionElements pSendAction;
	private final ReadingNameElements pReadingName;
	private final ReadingNameWithConfigScopeElements pReadingNameWithConfigScope;
	private final BitwiseOperatorElements pBitwiseOperator;
	private final RelationalOperatorElements pRelationalOperator;
	private final TimeUnitElements pTimeUnit;
	private final FilterTypeElements pFilterType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IOTConnectorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pWebserver = new WebserverElements();
		this.pWifi = new WifiElements();
		this.pConfig = new ConfigElements();
		this.pBoard = new BoardElements();
		this.pSensorConfig = new SensorConfigElements();
		this.pSensor = new SensorElements();
		this.pSensorName = new SensorNameElements();
		this.pOutput = new OutputElements();
		this.pFunction = new FunctionElements();
		this.pSample = new SampleElements();
		this.pSampleAction = new SampleActionElements();
		this.pFilter = new FilterElements();
		this.pFilterAction = new FilterActionElements();
		this.pFilterExp = new FilterExpElements();
		this.pProcess = new ProcessElements();
		this.pProcessAction = new ProcessActionElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pNumber = new NumberElements();
		this.pParenthesis = new ParenthesisElements();
		this.pVariable = new VariableElements();
		this.pSend = new SendElements();
		this.pSendAction = new SendActionElements();
		this.pReadingName = new ReadingNameElements();
		this.pReadingNameWithConfigScope = new ReadingNameWithConfigScopeElements();
		this.pBitwiseOperator = new BitwiseOperatorElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pFilterType = new FilterTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.group9.IOTConnector".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	webserver=Webserver wifis+=Wifi+ configs+=Config+ boards+=Board+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Webserver:
	//	'define' 'webserver' '(' 'host' 'is' url=STRING ',' 'port' 'is' port=INT ')';
	public WebserverElements getWebserverAccess() {
		return pWebserver;
	}
	
	public ParserRule getWebserverRule() {
		return getWebserverAccess().getRule();
	}
	
	//Wifi:
	//	'define' 'wifi' '(' 'ssid' 'is' ssid=STRING ',' 'password' 'is' password=STRING ')';
	public WifiElements getWifiAccess() {
		return pWifi;
	}
	
	public ParserRule getWifiRule() {
		return getWifiAccess().getRule();
	}
	
	//Config:
	//	'config' name=ID sensors+=Sensor+;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Board:
	//	'board' ('(' 'id' 'is' name=STRING ')')? sensorConfigs+=SensorConfig* 'use' 'config' configName=[Config];
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//SensorConfig:
	//	'sensor' name=SensorName ('external' '(' 'pin' 'in' 'is' pinIn=STRING ',' 'pin' 'out' 'is' pinOut=STRING ')')?;
	public SensorConfigElements getSensorConfigAccess() {
		return pSensorConfig;
	}
	
	public ParserRule getSensorConfigRule() {
		return getSensorConfigAccess().getRule();
	}
	
	//Sensor:
	//	'sensor' name=SensorName type='external'? output=Output functions+=Function+ send=Send;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SensorName:
	//	'light' | 'temperature';
	public SensorNameElements getSensorNameAccess() {
		return pSensorName;
	}
	
	public ParserRule getSensorNameRule() {
		return getSensorNameAccess().getRule();
	}
	
	//Output:
	//	'output' readingNames+=ReadingName (',' readingNames+=ReadingName)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Function:
	//	Sample | Filter | Process;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Sample:
	//	'sample' sampleActions+=SampleAction+;
	public SampleElements getSampleAccess() {
		return pSample;
	}
	
	public ParserRule getSampleRule() {
		return getSampleAccess().getRule();
	}
	
	//SampleAction:
	//	readingName=[ReadingName] ('when' readingNameToCompare=ReadingNameWithConfigScope
	//	relationalOperator=RelationalOperator number=INT)? 'every' amountOfTime=INT timeUnit=TimeUnit;
	public SampleActionElements getSampleActionAccess() {
		return pSampleAction;
	}
	
	public ParserRule getSampleActionRule() {
		return getSampleActionAccess().getRule();
	}
	
	//Filter:
	//	'filter' filterActions+=FilterAction+;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//FilterAction:
	//	readingName=[ReadingName] 'use' (filterType=FilterType 'with' number=INT 'values' | filterExp=FilterExp);
	public FilterActionElements getFilterActionAccess() {
		return pFilterAction;
	}
	
	public ParserRule getFilterActionRule() {
		return getFilterActionAccess().getRule();
	}
	
	//FilterExp:
	//	readingName=ReadingNameWithConfigScope relationalOperator=RelationalOperator number=INT
	//	(bitwiseOperator=BitwiseOperator filterExp=FilterExp)?;
	public FilterExpElements getFilterExpAccess() {
		return pFilterExp;
	}
	
	public ParserRule getFilterExpRule() {
		return getFilterExpAccess().getRule();
	}
	
	//Process:
	//	'process' processActions+=ProcessAction+;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessAction:
	//	readingName=[ReadingName] 'is' exp=Exp;
	public ProcessActionElements getProcessActionAccess() {
		return pProcessAction;
	}
	
	public ParserRule getProcessActionRule() {
		return getProcessActionAccess().getRule();
	}
	
	//Exp Expression:
	//	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor Expression:
	//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary Expression:
	//	Number | Parenthesis | Variable;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Number Expression:
	//	{Num} value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Parenthesis Expression:
	//	'(' Exp ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Variable Expression:
	//	{Var} readingName=ReadingNameWithConfigScope;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Send:
	//	'send' sendActions+=SendAction+;
	public SendElements getSendAccess() {
		return pSend;
	}
	
	public ParserRule getSendRule() {
		return getSendAccess().getRule();
	}
	
	//SendAction:
	//	readingName=[ReadingName] 'when' 'samples' relationalOperator=RelationalOperator number=INT;
	public SendActionElements getSendActionAccess() {
		return pSendAction;
	}
	
	public ParserRule getSendActionRule() {
		return getSendActionAccess().getRule();
	}
	
	//ReadingName:
	//	name=ID;
	public ReadingNameElements getReadingNameAccess() {
		return pReadingName;
	}
	
	public ParserRule getReadingNameRule() {
		return getReadingNameAccess().getRule();
	}
	
	//ReadingNameWithConfigScope:
	//	name=[ReadingName];
	public ReadingNameWithConfigScopeElements getReadingNameWithConfigScopeAccess() {
		return pReadingNameWithConfigScope;
	}
	
	public ParserRule getReadingNameWithConfigScopeRule() {
		return getReadingNameWithConfigScopeAccess().getRule();
	}
	
	//BitwiseOperator:
	//	value=('AND' | 'OR');
	public BitwiseOperatorElements getBitwiseOperatorAccess() {
		return pBitwiseOperator;
	}
	
	public ParserRule getBitwiseOperatorRule() {
		return getBitwiseOperatorAccess().getRule();
	}
	
	//RelationalOperator:
	//	value=('>' | '>=' | '==' | '<=' | '<' | '!=');
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//TimeUnit:
	//	value=('millisecond' | 'second' | 'minute' | 'ms' | 's' | 'm');
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//FilterType:
	//	value=('medianfilter' | 'meanfilter');
	public FilterTypeElements getFilterTypeAccess() {
		return pFilterType;
	}
	
	public ParserRule getFilterTypeRule() {
		return getFilterTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

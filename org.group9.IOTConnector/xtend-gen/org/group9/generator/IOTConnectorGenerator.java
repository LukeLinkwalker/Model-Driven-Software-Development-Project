/**
 * generated by Xtext 2.21.0
 */
package org.group9.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.group9.iOTConnector.Board;
import org.group9.iOTConnector.Config;
import org.group9.iOTConnector.Div;
import org.group9.iOTConnector.Expression;
import org.group9.iOTConnector.FilterAction;
import org.group9.iOTConnector.FilterExp;
import org.group9.iOTConnector.FilterType;
import org.group9.iOTConnector.Function;
import org.group9.iOTConnector.Minus;
import org.group9.iOTConnector.Mult;
import org.group9.iOTConnector.Num;
import org.group9.iOTConnector.Plus;
import org.group9.iOTConnector.ProcessAction;
import org.group9.iOTConnector.ReadingName;
import org.group9.iOTConnector.SampleAction;
import org.group9.iOTConnector.Send;
import org.group9.iOTConnector.SendAction;
import org.group9.iOTConnector.Sensor;
import org.group9.iOTConnector.SensorConfig;
import org.group9.iOTConnector.Var;
import org.group9.iOTConnector.Webserver;
import org.group9.iOTConnector.Wifi;
import org.group9.iOTConnector.impl.FilterImpl;
import org.group9.iOTConnector.impl.ProcessImpl;
import org.group9.iOTConnector.impl.SampleImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IOTConnectorGenerator extends AbstractGenerator {
  public enum VariableType {
    last_measured,
    
    sample_rate,
    
    filter_stack,
    
    send_stack;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("main.py", this.compile(resource));
  }
  
  public String compile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("from network import WLAN");
    _builder.newLine();
    _builder.append("from pysense import Pysense");
    _builder.newLine();
    _builder.append("from LTR329ALS01 import LTR329ALS01");
    _builder.newLine();
    _builder.append("from machine import Pin");
    _builder.newLine();
    _builder.append("import machine");
    _builder.newLine();
    _builder.append("import urequest");
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import utime");
    _builder.newLine();
    _builder.append("import pycom");
    _builder.newLine();
    _builder.append("import ubinascii");
    _builder.newLine();
    _builder.newLine();
    String _compileDefinitions = this.compileDefinitions(resource);
    String _plus = (_builder.toString() + _compileDefinitions);
    String _compileConstants = this.compileConstants(resource);
    String _plus_1 = (_plus + _compileConstants);
    String _compileLightSensor = this.compileLightSensor(resource);
    String _plus_2 = (_plus_1 + _compileLightSensor);
    String _compileTemperatureSensor = this.compileTemperatureSensor(resource);
    String _plus_3 = (_plus_2 + _compileTemperatureSensor);
    String _compileConfigs = this.compileConfigs(resource);
    String _plus_4 = (_plus_3 + _compileConfigs);
    String _compileBoardAction = this.compileBoardAction(resource);
    String _plus_5 = (_plus_4 + _compileBoardAction);
    String _compileNetworking = this.compileNetworking(resource);
    return (_plus_5 + _compileNetworking);
  }
  
  public String compileDefinitions(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Webserver> _filter = Iterables.<Webserver>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Webserver.class);
      for(final Webserver webserver : _filter) {
        _builder.append("webserver = \"");
        String _url = webserver.getUrl();
        _builder.append(_url);
        _builder.append(":");
        int _port = webserver.getPort();
        _builder.append(_port);
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("wifis = [");
    _builder.newLine();
    {
      Iterable<Wifi> _filter_1 = Iterables.<Wifi>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Wifi.class);
      boolean _hasElements = false;
      for(final Wifi wifi : _filter_1) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append("(\"");
        String _ssid = wifi.getSsid();
        _builder.append(_ssid);
        _builder.append("\", \"");
        String _password = wifi.getPassword();
        _builder.append(_password);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("]");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileNetworking(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("wlan = WLAN(mode=WLAN.STA)");
    _builder.newLine();
    _builder.append("wlan.ifconfig(config=\'dhcp\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pycom.heartbeat(False)");
    _builder.newLine();
    _builder.append("connected = False");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while True:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if connected == True:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if not wlan.isconnected():");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("connected = False");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("pycom.rgbled(0x00FF00)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boardAction(str(ubinascii.hexlify(machine.unique_id())))");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if connected == False:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pycom.rgbled(0xFF0000)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nets = wlan.scan()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("except OSError:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\"OSError happened ...\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for net in nets:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if connected == True:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for wifi in wifis:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if(wifi[0] == net.ssid):");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("wlan.connect(net.ssid, auth=(WLAN.WPA2, wifi[1]), timeout=10000)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("connected = True");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("utime.sleep_ms(10000)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("utime.sleep_ms(1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileConstants(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Config> _filter = Iterables.<Config>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Config.class);
      for(final Config config : _filter) {
        {
          EList<Sensor> _sensors = config.getSensors();
          for(final Sensor sensor : _sensors) {
            {
              EList<ReadingName> _readingNames = sensor.getOutput().getReadingNames();
              for(final ReadingName output : _readingNames) {
                String _compileVariable = this.compileVariable(IOTConnectorGenerator.VariableType.last_measured, output);
                _builder.append(_compileVariable);
                _builder.append(" = -1");
                _builder.newLineIfNotEmpty();
                String _compileVariable_1 = this.compileVariable(IOTConnectorGenerator.VariableType.sample_rate, output);
                _builder.append(_compileVariable_1);
                _builder.append(" = -1");
                _builder.newLineIfNotEmpty();
                String _compileVariable_2 = this.compileVariable(IOTConnectorGenerator.VariableType.filter_stack, output);
                _builder.append(_compileVariable_2);
                _builder.append(" = []");
                _builder.newLineIfNotEmpty();
                String _compileVariable_3 = this.compileVariable(IOTConnectorGenerator.VariableType.send_stack, output);
                _builder.append(_compileVariable_3);
                _builder.append(" = []");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileVariable(final IOTConnectorGenerator.VariableType type, final ReadingName output) {
    EObject _eContainer = output.eContainer().eContainer();
    Sensor sensor = ((Sensor) _eContainer);
    EObject _eContainer_1 = sensor.eContainer();
    Config config = ((Config) _eContainer_1);
    String _name = config.getName();
    String _plus = (_name + "_");
    String _name_1 = sensor.getName();
    String _plus_1 = (_plus + _name_1);
    String _plus_2 = (_plus_1 + "_");
    String _xifexpression = null;
    String _type = sensor.getType();
    boolean _equals = Objects.equal(_type, null);
    if (_equals) {
      _xifexpression = "internal";
    } else {
      _xifexpression = sensor.getType();
    }
    String _plus_3 = (_plus_2 + _xifexpression);
    String _plus_4 = (_plus_3 + "_");
    String _name_2 = output.getName();
    String _plus_5 = (_plus_4 + _name_2);
    String _plus_6 = (_plus_5 + "_");
    String _string = type.toString();
    return (_plus_6 + _string);
  }
  
  public String compileConfigs(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Config> _filter = Iterables.<Config>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Config.class);
      for(final Config config : _filter) {
        _builder.append("def ");
        String _name = config.getName();
        _builder.append(_name);
        _builder.append("():");
        _builder.newLineIfNotEmpty();
        {
          EList<Sensor> _sensors = config.getSensors();
          for(final Sensor sensor : _sensors) {
            {
              EList<ReadingName> _readingNames = sensor.getOutput().getReadingNames();
              for(final ReadingName output : _readingNames) {
                _builder.append("\t");
                _builder.append("global ");
                String _compileVariable = this.compileVariable(IOTConnectorGenerator.VariableType.last_measured, output);
                _builder.append(_compileVariable, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("global ");
                String _compileVariable_1 = this.compileVariable(IOTConnectorGenerator.VariableType.sample_rate, output);
                _builder.append(_compileVariable_1, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("global ");
                String _compileVariable_2 = this.compileVariable(IOTConnectorGenerator.VariableType.filter_stack, output);
                _builder.append(_compileVariable_2, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("global ");
                String _compileVariable_3 = this.compileVariable(IOTConnectorGenerator.VariableType.send_stack, output);
                _builder.append(_compileVariable_3, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Sensor> _sensors_1 = config.getSensors();
          for(final Sensor sensor_1 : _sensors_1) {
            {
              EList<ReadingName> _readingNames_1 = sensor_1.getOutput().getReadingNames();
              for(final ReadingName output_1 : _readingNames_1) {
                {
                  if (((sensor_1.getType() != null) || Objects.equal(sensor_1.getType(), ""))) {
                    _builder.append("\t");
                    _builder.append("if (");
                    String _compileVariable_4 = this.compileVariable(IOTConnectorGenerator.VariableType.last_measured, output_1);
                    _builder.append(_compileVariable_4, "\t");
                    _builder.append(" == -1 or utime.ticks_diff(utime.ticks_ms(),  ");
                    String _name_1 = config.getName();
                    _builder.append(_name_1, "\t");
                    _builder.append("_");
                    String _name_2 = sensor_1.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append("_");
                    String _type = sensor_1.getType();
                    _builder.append(_type, "\t");
                    _builder.append("_");
                    String _name_3 = output_1.getName();
                    _builder.append(_name_3, "\t");
                    _builder.append("_last_measured) > ");
                    String _name_4 = config.getName();
                    _builder.append(_name_4, "\t");
                    _builder.append("_");
                    String _name_5 = sensor_1.getName();
                    _builder.append(_name_5, "\t");
                    _builder.append("_");
                    String _type_1 = sensor_1.getType();
                    _builder.append(_type_1, "\t");
                    _builder.append("_");
                    String _name_6 = output_1.getName();
                    _builder.append(_name_6, "\t");
                    _builder.append("_sample_rate):");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    String _compileVariable_5 = this.compileVariable(IOTConnectorGenerator.VariableType.last_measured, output_1);
                    _builder.append(_compileVariable_5, "\t\t");
                    _builder.append(" = utime.ticks_ms()");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      int _length = ((Object[])Conversions.unwrapArray(sensor_1.getOutput().getReadingNames(), Object.class)).length;
                      boolean _equals = (_length == 1);
                      if (_equals) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _name_7 = output_1.getName();
                        _builder.append(_name_7, "\t\t");
                        _builder.append(" = ");
                        String _compileSensorSampling = this.compileSensorSampling(sensor_1);
                        _builder.append(_compileSensorSampling, "\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _name_8 = output_1.getName();
                        _builder.append(_name_8, "\t\t");
                        _builder.append(" = ");
                        String _compileSensorSampling_1 = this.compileSensorSampling(sensor_1);
                        _builder.append(_compileSensorSampling_1, "\t\t");
                        _builder.append("[");
                        int _indexOf = sensor_1.getOutput().getReadingNames().indexOf(output_1);
                        _builder.append(_indexOf, "\t\t");
                        _builder.append("]");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      EList<Function> _functions = sensor_1.getFunctions();
                      for(final Function function : _functions) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _compileFunction = this.compileFunction(function, output_1);
                        _builder.append(_compileFunction, "\t\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      Send _send = sensor_1.getSend();
                      boolean _tripleNotEquals = (_send != null);
                      if (_tripleNotEquals) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _compileSendFunction = this.compileSendFunction(sensor_1.getSend(), output_1);
                        _builder.append(_compileSendFunction, "\t\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    _builder.append("\t");
                    _builder.append("if (");
                    String _name_9 = config.getName();
                    _builder.append(_name_9, "\t");
                    _builder.append("_");
                    String _name_10 = sensor_1.getName();
                    _builder.append(_name_10, "\t");
                    _builder.append("_internal_");
                    String _name_11 = output_1.getName();
                    _builder.append(_name_11, "\t");
                    _builder.append("_last_measured == -1 or utime.ticks_diff(utime.ticks_ms(),  ");
                    String _name_12 = config.getName();
                    _builder.append(_name_12, "\t");
                    _builder.append("_");
                    String _name_13 = sensor_1.getName();
                    _builder.append(_name_13, "\t");
                    _builder.append("_internal_");
                    String _name_14 = output_1.getName();
                    _builder.append(_name_14, "\t");
                    _builder.append("_last_measured) > ");
                    String _name_15 = config.getName();
                    _builder.append(_name_15, "\t");
                    _builder.append("_");
                    String _name_16 = sensor_1.getName();
                    _builder.append(_name_16, "\t");
                    _builder.append("_internal_");
                    String _name_17 = output_1.getName();
                    _builder.append(_name_17, "\t");
                    _builder.append("_sample_rate):");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    String _name_18 = config.getName();
                    _builder.append(_name_18, "\t\t");
                    _builder.append("_");
                    String _name_19 = sensor_1.getName();
                    _builder.append(_name_19, "\t\t");
                    _builder.append("_internal_");
                    String _name_20 = output_1.getName();
                    _builder.append(_name_20, "\t\t");
                    _builder.append("_last_measured = utime.ticks_ms()");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      int _length_1 = ((Object[])Conversions.unwrapArray(sensor_1.getOutput().getReadingNames(), Object.class)).length;
                      boolean _equals_1 = (_length_1 == 1);
                      if (_equals_1) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _name_21 = output_1.getName();
                        _builder.append(_name_21, "\t\t");
                        _builder.append(" = ");
                        String _compileSensorSampling_2 = this.compileSensorSampling(sensor_1);
                        _builder.append(_compileSensorSampling_2, "\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _name_22 = output_1.getName();
                        _builder.append(_name_22, "\t\t");
                        _builder.append(" = ");
                        String _compileSensorSampling_3 = this.compileSensorSampling(sensor_1);
                        _builder.append(_compileSensorSampling_3, "\t\t");
                        _builder.append("[");
                        int _indexOf_1 = sensor_1.getOutput().getReadingNames().indexOf(output_1);
                        _builder.append(_indexOf_1, "\t\t");
                        _builder.append("]");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      EList<Function> _functions_1 = sensor_1.getFunctions();
                      for(final Function function_1 : _functions_1) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _compileFunction_1 = this.compileFunction(function_1, output_1);
                        _builder.append(_compileFunction_1, "\t\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      Send _send_1 = sensor_1.getSend();
                      boolean _tripleNotEquals_1 = (_send_1 != null);
                      if (_tripleNotEquals_1) {
                        _builder.append("\t");
                        _builder.append("\t");
                        String _compileSendFunction_1 = this.compileSendFunction(sensor_1.getSend(), output_1);
                        _builder.append(_compileSendFunction_1, "\t\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileSensorSampling(final Sensor sensor) {
    String _name = sensor.getName();
    if (_name != null) {
      switch (_name) {
        case "light":
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("lt.light()");
          return _builder.toString();
        case "temperature":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("apin.voltage()");
          return _builder_1.toString();
      }
    }
    return null;
  }
  
  public String compileFunction(final Function function, final ReadingName output) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _simpleName = function.getClass().getSimpleName();
      boolean _equals = Objects.equal(_simpleName, "SampleImpl");
      if (_equals) {
        String _compileSampleFunction = this.compileSampleFunction(function, output);
        _builder.append(_compileSampleFunction);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_1 = function.getClass().getSimpleName();
      boolean _equals_1 = Objects.equal(_simpleName_1, "ProcessImpl");
      if (_equals_1) {
        String _compileProcessFunction = this.compileProcessFunction(function, output);
        _builder.append(_compileProcessFunction);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_2 = function.getClass().getSimpleName();
      boolean _equals_2 = Objects.equal(_simpleName_2, "FilterImpl");
      if (_equals_2) {
        String _compileFilterFunction = this.compileFilterFunction(function, output);
        _builder.append(_compileFilterFunction);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileSampleFunction(final Function function, final ReadingName output) {
    String _xblockexpression = null;
    {
      SampleImpl temp = ((SampleImpl) function);
      EObject _eContainer = function.eContainer();
      Sensor sensor = ((Sensor) _eContainer);
      EObject _eContainer_1 = sensor.eContainer();
      Config config = ((Config) _eContainer_1);
      int count = 0;
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<SampleAction> _sampleActions = temp.getSampleActions();
        for(final SampleAction sampleAction : _sampleActions) {
          {
            String _name = output.getName();
            String _name_1 = sampleAction.getReadingName().getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              Object _xblockexpression_1 = null;
              {
                int _count = count;
                count = (_count + 1);
                _xblockexpression_1 = null;
              }
              _builder.append(_xblockexpression_1);
              _builder.newLineIfNotEmpty();
              _builder.newLine();
              _builder.append("if (");
              String _name_2 = sampleAction.getReadingNameToCompare().getName().getName();
              _builder.append(_name_2);
              _builder.append(" ");
              String _value = sampleAction.getRelationalOperator().getValue();
              _builder.append(_value);
              _builder.append(" ");
              int _number = sampleAction.getNumber();
              _builder.append(_number);
              _builder.append("):");
              _builder.newLineIfNotEmpty();
              {
                String _type = sensor.getType();
                boolean _tripleNotEquals = (_type != null);
                if (_tripleNotEquals) {
                  _builder.append("\t");
                  String _name_3 = config.getName();
                  _builder.append(_name_3, "\t");
                  _builder.append("_");
                  String _name_4 = sensor.getName();
                  _builder.append(_name_4, "\t");
                  _builder.append("_");
                  String _type_1 = sensor.getType();
                  _builder.append(_type_1, "\t");
                  _builder.append("_");
                  String _name_5 = sampleAction.getReadingName().getName();
                  _builder.append(_name_5, "\t");
                  _builder.append("_sample_rate = ");
                  String _compileSampleAction = this.compileSampleAction(sampleAction);
                  _builder.append(_compileSampleAction, "\t");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t");
                  String _name_6 = config.getName();
                  _builder.append(_name_6, "\t");
                  _builder.append("_");
                  String _name_7 = sensor.getName();
                  _builder.append(_name_7, "\t");
                  _builder.append("_internal_");
                  String _name_8 = sampleAction.getReadingName().getName();
                  _builder.append(_name_8, "\t");
                  _builder.append("_sample_rate = ");
                  String _compileSampleAction_1 = this.compileSampleAction(sampleAction);
                  _builder.append(_compileSampleAction_1, "\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      _builder.newLine();
      {
        if ((count == 0)) {
          {
            String _type_2 = sensor.getType();
            boolean _tripleNotEquals_1 = (_type_2 != null);
            if (_tripleNotEquals_1) {
              String _name_9 = config.getName();
              _builder.append(_name_9);
              _builder.append("_");
              String _name_10 = sensor.getName();
              _builder.append(_name_10);
              _builder.append("_");
              String _type_3 = sensor.getType();
              _builder.append(_type_3);
              _builder.append("_");
              String _name_11 = output.getName();
              _builder.append(_name_11);
              _builder.append("_sample_rate = 1000");
              _builder.newLineIfNotEmpty();
            } else {
              String _name_12 = config.getName();
              _builder.append(_name_12);
              _builder.append("_");
              String _name_13 = sensor.getName();
              _builder.append(_name_13);
              _builder.append("_internal_");
              String _name_14 = output.getName();
              _builder.append(_name_14);
              _builder.append("_sample_rate = 1000");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.newLine();
        }
      }
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  public String compileSampleAction(final SampleAction action) {
    if ((action.getTimeUnit().getValue().equals("ms") || action.getTimeUnit().getValue().equals("millisecond"))) {
      return Integer.valueOf(action.getAmountOfTime()).toString();
    }
    if ((action.getTimeUnit().getValue().equals("s") || action.getTimeUnit().getValue().equals("second"))) {
      int _amountOfTime = action.getAmountOfTime();
      return Integer.valueOf((_amountOfTime * 1000)).toString();
    }
    if ((action.getTimeUnit().getValue().equals("m") || action.getTimeUnit().getValue().equals("minute"))) {
      int _amountOfTime_1 = action.getAmountOfTime();
      return Integer.valueOf((_amountOfTime_1 * 60000)).toString();
    }
    return null;
  }
  
  public String compileProcessFunction(final Function function, final ReadingName output) {
    String _xblockexpression = null;
    {
      ProcessImpl temp = ((ProcessImpl) function);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ProcessAction> _processActions = temp.getProcessActions();
        for(final ProcessAction processAction : _processActions) {
          {
            String _name = processAction.getReadingName().getName();
            String _name_1 = output.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              String _name_2 = processAction.getReadingName().getName();
              _builder.append(_name_2);
              _builder.append(" = ");
              String _compileExp = this.compileExp(processAction.getExp());
              _builder.append(_compileExp);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  public String compileExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _compileExp = this.compileExp(((Plus)exp).getLeft());
      String _plus = (_compileExp + "+");
      String _compileExp_1 = this.compileExp(((Plus)exp).getRight());
      _switchResult = (_plus + _compileExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _compileExp = this.compileExp(((Minus)exp).getLeft());
        String _plus = (_compileExp + "-");
        String _compileExp_1 = this.compileExp(((Minus)exp).getRight());
        _switchResult = (_plus + _compileExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _compileExp = this.compileExp(((Mult)exp).getLeft());
        String _plus = (_compileExp + "*");
        String _compileExp_1 = this.compileExp(((Mult)exp).getRight());
        _switchResult = (_plus + _compileExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _compileExp = this.compileExp(((Div)exp).getLeft());
        String _plus = (_compileExp + "/");
        String _compileExp_1 = this.compileExp(((Div)exp).getRight());
        _switchResult = (_plus + _compileExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getReadingName().getName().getName();
      }
    }
    String _plus = ("(" + _switchResult);
    return (_plus + 
      ")");
  }
  
  public String compileFilterFunction(final Function function, final ReadingName output) {
    String _xblockexpression = null;
    {
      FilterImpl temp = ((FilterImpl) function);
      EObject _eContainer = function.eContainer();
      Sensor sensor = ((Sensor) _eContainer);
      EObject _eContainer_1 = sensor.eContainer();
      Config config = ((Config) _eContainer_1);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<FilterAction> _filterActions = temp.getFilterActions();
        for(final FilterAction filterAction : _filterActions) {
          {
            String _name = filterAction.getReadingName().getName();
            String _name_1 = output.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              {
                FilterType _filterType = filterAction.getFilterType();
                boolean _tripleEquals = (_filterType == null);
                if (_tripleEquals) {
                  {
                    String _type = sensor.getType();
                    boolean _tripleNotEquals = (_type != null);
                    if (_tripleNotEquals) {
                      _builder.append("if(");
                      String _compileFilterExp = this.compileFilterExp(filterAction.getFilterExp());
                      _builder.append(_compileFilterExp);
                      _builder.append("):");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_2 = config.getName();
                      _builder.append(_name_2, "\t");
                      _builder.append("_");
                      String _name_3 = sensor.getName();
                      _builder.append(_name_3, "\t");
                      _builder.append("_");
                      String _type_1 = sensor.getType();
                      _builder.append(_type_1, "\t");
                      _builder.append("_");
                      String _name_4 = filterAction.getReadingName().getName();
                      _builder.append(_name_4, "\t");
                      _builder.append("_send_stack.append(");
                      String _name_5 = output.getName();
                      _builder.append(_name_5, "\t");
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("if(");
                      String _compileFilterExp_1 = this.compileFilterExp(filterAction.getFilterExp());
                      _builder.append(_compileFilterExp_1);
                      _builder.append("):");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_6 = config.getName();
                      _builder.append(_name_6, "\t");
                      _builder.append("_");
                      String _name_7 = sensor.getName();
                      _builder.append(_name_7, "\t");
                      _builder.append("_internal_");
                      String _name_8 = filterAction.getReadingName().getName();
                      _builder.append(_name_8, "\t");
                      _builder.append("_send_stack.append(");
                      String _name_9 = output.getName();
                      _builder.append(_name_9, "\t");
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  {
                    String _type_2 = sensor.getType();
                    boolean _tripleNotEquals_1 = (_type_2 != null);
                    if (_tripleNotEquals_1) {
                      String _name_10 = config.getName();
                      _builder.append(_name_10);
                      _builder.append("_");
                      String _name_11 = sensor.getName();
                      _builder.append(_name_11);
                      _builder.append("_");
                      String _type_3 = sensor.getType();
                      _builder.append(_type_3);
                      _builder.append("_");
                      String _name_12 = filterAction.getReadingName().getName();
                      _builder.append(_name_12);
                      _builder.append("_filter_stack.append(");
                      String _name_13 = output.getName();
                      _builder.append(_name_13);
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(len(");
                      String _name_14 = config.getName();
                      _builder.append(_name_14);
                      _builder.append("_");
                      String _name_15 = sensor.getName();
                      _builder.append(_name_15);
                      _builder.append("_");
                      String _type_4 = sensor.getType();
                      _builder.append(_type_4);
                      _builder.append("_");
                      String _name_16 = filterAction.getReadingName().getName();
                      _builder.append(_name_16);
                      _builder.append("_filter_stack) == ");
                      int _number = filterAction.getNumber();
                      _builder.append(_number);
                      _builder.append("):");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("avg = 0");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("for i in ");
                      String _name_17 = config.getName();
                      _builder.append(_name_17, "\t");
                      _builder.append("_");
                      String _name_18 = sensor.getName();
                      _builder.append(_name_18, "\t");
                      _builder.append("_");
                      String _type_5 = sensor.getType();
                      _builder.append(_type_5, "\t");
                      _builder.append("_");
                      String _name_19 = filterAction.getReadingName().getName();
                      _builder.append(_name_19, "\t");
                      _builder.append("_filter_stack:");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("avg += i");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("avg /= ");
                      int _number_1 = filterAction.getNumber();
                      _builder.append(_number_1, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_20 = config.getName();
                      _builder.append(_name_20, "\t");
                      _builder.append("_");
                      String _name_21 = sensor.getName();
                      _builder.append(_name_21, "\t");
                      _builder.append("_");
                      String _type_6 = sensor.getType();
                      _builder.append(_type_6, "\t");
                      _builder.append("_");
                      String _name_22 = filterAction.getReadingName().getName();
                      _builder.append(_name_22, "\t");
                      _builder.append("_send_stack.append(avg)");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_23 = config.getName();
                      _builder.append(_name_23, "\t");
                      _builder.append("_");
                      String _name_24 = sensor.getName();
                      _builder.append(_name_24, "\t");
                      _builder.append("_");
                      String _type_7 = sensor.getType();
                      _builder.append(_type_7, "\t");
                      _builder.append("_");
                      String _name_25 = filterAction.getReadingName().getName();
                      _builder.append(_name_25, "\t");
                      _builder.append("_filter_stack.remove(");
                      String _name_26 = config.getName();
                      _builder.append(_name_26, "\t");
                      _builder.append("_");
                      String _name_27 = sensor.getName();
                      _builder.append(_name_27, "\t");
                      _builder.append("_");
                      String _type_8 = sensor.getType();
                      _builder.append(_type_8, "\t");
                      _builder.append("_");
                      String _name_28 = filterAction.getReadingName().getName();
                      _builder.append(_name_28, "\t");
                      _builder.append("_filter_stack[0])");
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _name_29 = config.getName();
                      _builder.append(_name_29);
                      _builder.append("_");
                      String _name_30 = sensor.getName();
                      _builder.append(_name_30);
                      _builder.append("_internal_");
                      String _name_31 = filterAction.getReadingName().getName();
                      _builder.append(_name_31);
                      _builder.append("_filter_stack.append(");
                      String _name_32 = output.getName();
                      _builder.append(_name_32);
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(len(");
                      String _name_33 = config.getName();
                      _builder.append(_name_33);
                      _builder.append("_");
                      String _name_34 = sensor.getName();
                      _builder.append(_name_34);
                      _builder.append("_internal_");
                      String _name_35 = filterAction.getReadingName().getName();
                      _builder.append(_name_35);
                      _builder.append("_filter_stack) == ");
                      int _number_2 = filterAction.getNumber();
                      _builder.append(_number_2);
                      _builder.append("):");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("avg = 0");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("for i in ");
                      String _name_36 = config.getName();
                      _builder.append(_name_36, "\t");
                      _builder.append("_");
                      String _name_37 = sensor.getName();
                      _builder.append(_name_37, "\t");
                      _builder.append("_internal_");
                      String _name_38 = filterAction.getReadingName().getName();
                      _builder.append(_name_38, "\t");
                      _builder.append("_filter_stack:");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("avg += i");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("avg /= ");
                      int _number_3 = filterAction.getNumber();
                      _builder.append(_number_3, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_39 = config.getName();
                      _builder.append(_name_39, "\t");
                      _builder.append("_");
                      String _name_40 = sensor.getName();
                      _builder.append(_name_40, "\t");
                      _builder.append("_internal_");
                      String _name_41 = filterAction.getReadingName().getName();
                      _builder.append(_name_41, "\t");
                      _builder.append("_send_stack.append(avg)");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      String _name_42 = config.getName();
                      _builder.append(_name_42, "\t");
                      _builder.append("_");
                      String _name_43 = sensor.getName();
                      _builder.append(_name_43, "\t");
                      _builder.append("_internal_");
                      String _name_44 = filterAction.getReadingName().getName();
                      _builder.append(_name_44, "\t");
                      _builder.append("_filter_stack.remove(");
                      String _name_45 = config.getName();
                      _builder.append(_name_45, "\t");
                      _builder.append("_");
                      String _name_46 = sensor.getName();
                      _builder.append(_name_46, "\t");
                      _builder.append("_internal_");
                      String _name_47 = filterAction.getReadingName().getName();
                      _builder.append(_name_47, "\t");
                      _builder.append("_filter_stack[0])");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  public String compileFilterExp(final FilterExp exp) {
    FilterExp _filterExp = exp.getFilterExp();
    boolean _tripleNotEquals = (_filterExp != null);
    if (_tripleNotEquals) {
      String _name = exp.getReadingName().getName().getName();
      String _plus = (_name + " ");
      String _value = exp.getRelationalOperator().getValue();
      String _plus_1 = (_plus + _value);
      String _plus_2 = (_plus_1 + " ");
      int _number = exp.getNumber();
      String _plus_3 = (_plus_2 + Integer.valueOf(_number));
      String _plus_4 = (_plus_3 + " ");
      String _lowerCase = exp.getBitwiseOperator().getValue().toLowerCase();
      String _plus_5 = (_plus_4 + _lowerCase);
      String _plus_6 = (_plus_5 + " ");
      String _compileFilterExp = this.compileFilterExp(exp.getFilterExp());
      String _plus_7 = (_plus_6 + _compileFilterExp);
      return (_plus_7 + " ");
    } else {
      String _name_1 = exp.getReadingName().getName().getName();
      String _plus_8 = (_name_1 + " ");
      String _value_1 = exp.getRelationalOperator().getValue();
      String _plus_9 = (_plus_8 + _value_1);
      String _plus_10 = (_plus_9 + " ");
      int _number_1 = exp.getNumber();
      return (_plus_10 + Integer.valueOf(_number_1));
    }
  }
  
  public String compileSendFunction(final Send function, final ReadingName output) {
    String _xblockexpression = null;
    {
      EObject _eContainer = function.eContainer();
      Sensor sensor = ((Sensor) _eContainer);
      EObject _eContainer_1 = sensor.eContainer();
      Config config = ((Config) _eContainer_1);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<SendAction> _sendActions = function.getSendActions();
        for(final SendAction sendAction : _sendActions) {
          {
            String _name = sendAction.getReadingName().getName();
            String _name_1 = output.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              {
                String _type = sensor.getType();
                boolean _tripleNotEquals = (_type != null);
                if (_tripleNotEquals) {
                  _builder.append("if(len(");
                  String _name_2 = config.getName();
                  _builder.append(_name_2);
                  _builder.append("_");
                  String _name_3 = sensor.getName();
                  _builder.append(_name_3);
                  _builder.append("_");
                  String _type_1 = sensor.getType();
                  _builder.append(_type_1);
                  _builder.append("_");
                  String _name_4 = sendAction.getReadingName().getName();
                  _builder.append(_name_4);
                  _builder.append("_send_stack) ");
                  String _value = sendAction.getRelationalOperator().getValue();
                  _builder.append(_value);
                  _builder.append(" ");
                  int _number = sendAction.getNumber();
                  _builder.append(_number);
                  _builder.append("):");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("for i in ");
                  String _name_5 = config.getName();
                  _builder.append(_name_5, "\t");
                  _builder.append("_");
                  String _name_6 = sensor.getName();
                  _builder.append(_name_6, "\t");
                  _builder.append("_");
                  String _type_2 = sensor.getType();
                  _builder.append(_type_2, "\t");
                  _builder.append("_");
                  String _name_7 = sendAction.getReadingName().getName();
                  _builder.append(_name_7, "\t");
                  _builder.append("_send_stack:");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("r = urequest.request(\"POST\", str(\"http://\") +str(webserver) + str(\"/insert/\") + str(ubinascii.hexlify(machine.unique_id())) + \"/\" + str(\"");
                  String _name_8 = sensor.getName();
                  _builder.append(_name_8, "\t\t");
                  _builder.append("\") + \"/\" + str(\"");
                  String _type_3 = sensor.getType();
                  _builder.append(_type_3, "\t\t");
                  _builder.append("\") + \"/\" + str(999),None)");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("r.close()");
                  _builder.newLine();
                  _builder.append("\t");
                  String _name_9 = config.getName();
                  _builder.append(_name_9, "\t");
                  _builder.append("_");
                  String _name_10 = sensor.getName();
                  _builder.append(_name_10, "\t");
                  _builder.append("_");
                  String _type_4 = sensor.getType();
                  _builder.append(_type_4, "\t");
                  _builder.append("_");
                  String _name_11 = sendAction.getReadingName().getName();
                  _builder.append(_name_11, "\t");
                  _builder.append("_send_stack.clear()");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("if(len(");
                  String _name_12 = config.getName();
                  _builder.append(_name_12);
                  _builder.append("_");
                  String _name_13 = sensor.getName();
                  _builder.append(_name_13);
                  _builder.append("_internal_");
                  String _name_14 = sendAction.getReadingName().getName();
                  _builder.append(_name_14);
                  _builder.append("_send_stack) ");
                  String _value_1 = sendAction.getRelationalOperator().getValue();
                  _builder.append(_value_1);
                  _builder.append(" ");
                  int _number_1 = sendAction.getNumber();
                  _builder.append(_number_1);
                  _builder.append("):");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("for i in ");
                  String _name_15 = config.getName();
                  _builder.append(_name_15, "\t");
                  _builder.append("_");
                  String _name_16 = sensor.getName();
                  _builder.append(_name_16, "\t");
                  _builder.append("_internal_");
                  String _name_17 = sendAction.getReadingName().getName();
                  _builder.append(_name_17, "\t");
                  _builder.append("_send_stack:");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("r = urequest.request(\"POST\", str(\"http://\") +str(webserver) + str(\"/insert/\") + str(ubinascii.hexlify(machine.unique_id())) + \"/\" + str(\"");
                  String _name_18 = sensor.getName();
                  _builder.append(_name_18, "\t\t");
                  _builder.append("\") + \"/internal/\" + str(999),None)");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("r.close()");
                  _builder.newLine();
                  _builder.append("\t");
                  String _name_19 = config.getName();
                  _builder.append(_name_19, "\t");
                  _builder.append("_");
                  String _name_20 = sensor.getName();
                  _builder.append(_name_20, "\t");
                  _builder.append("_internal_");
                  String _name_21 = sendAction.getReadingName().getName();
                  _builder.append(_name_21, "\t");
                  _builder.append("_send_stack.clear()");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  public String compileBoardAction(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def boardAction(id):");
    _builder.newLine();
    _builder.append("\t");
    String defaultConfig = "";
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    boolean first = true;
    _builder.newLineIfNotEmpty();
    {
      Iterable<Board> _filter = Iterables.<Board>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Board.class);
      for(final Board board : _filter) {
        {
          String _name = board.getName();
          boolean _tripleNotEquals = (_name != null);
          if (_tripleNotEquals) {
            {
              if ((first == true)) {
                _builder.append("\t");
                Object _xblockexpression = null;
                {
                  first = false;
                  _xblockexpression = null;
                }
                _builder.append(_xblockexpression, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("if(id == \"b\'");
                String _name_1 = board.getName();
                _builder.append(_name_1, "\t");
                _builder.append("\'\"):");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                String _name_2 = board.getConfigName().getName();
                _builder.append(_name_2, "\t\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("elif(id == \"b\'");
                String _name_3 = board.getName();
                _builder.append(_name_3, "\t");
                _builder.append("\'\"):");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                String _name_4 = board.getConfigName().getName();
                _builder.append(_name_4, "\t\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t");
            Object _xblockexpression_1 = null;
            {
              defaultConfig = board.getConfigName().getName();
              _xblockexpression_1 = null;
            }
            _builder.append(_xblockexpression_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      boolean _notEquals = (!Objects.equal(defaultConfig, ""));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("else:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append(defaultConfig, "\t\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileLightSensor(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("py = Pysense()");
    _builder.newLine();
    _builder.append("lt = LTR329ALS01(py)");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String compileTemperatureSensor(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<SensorConfig> _filter = Iterables.<SensorConfig>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), SensorConfig.class);
      for(final SensorConfig sensorConfig : _filter) {
        {
          String _name = sensorConfig.getName();
          boolean _equals = Objects.equal(_name, "temperature");
          if (_equals) {
            _builder.append("p_out = Pin(\'");
            String _pinOut = sensorConfig.getPinOut();
            _builder.append(_pinOut);
            _builder.append("\', mode=Pin.OUT)");
            _builder.newLineIfNotEmpty();
            _builder.append("p_out.value(0)");
            _builder.newLine();
            _builder.append("time.sleep(1)");
            _builder.newLine();
            _builder.append("p_out.value(1)");
            _builder.newLine();
            _builder.newLine();
            _builder.append("adc = machine.ADC(bits=12)");
            _builder.newLine();
            _builder.append("apin = adc.channel(pin=\'");
            String _pinIn = sensorConfig.getPinIn();
            _builder.append(_pinIn);
            _builder.append("\', attn=machine.ADC.ATTN_11DB)");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
}

/*
 * generated by Xtext 2.21.0
 */
package org.group9.validation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.group9.iOTConnector.Function;
import org.group9.iOTConnector.IOTConnectorPackage;
import org.group9.iOTConnector.Sensor;
import org.group9.iOTConnector.Webserver;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.common.base.Objects;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class IOTConnectorValidator extends AbstractIOTConnectorValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					IOTConnectorPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	@Check
    public void checkOrderOfFunction(Function function) {
        boolean error = false;
        boolean foundFilter = false;

         if(!function.getClass().getSimpleName().equals("FilterImpl")) {
                return;
            }

        for (EObject obj : function.eContainer().eContents()) {
            if (obj.getClass().getSimpleName().equals("FilterImpl")) {
                foundFilter = true;
            } 
            if (obj.getClass().getSimpleName().equals("SampleImpl") && foundFilter == true) {
                error = true;
            }
        }

        if (error == true) {
            error("Filter must come after sample", null);
        }
    }

	
	@Check
	public void checkNumberOfFunctions(Function function) {
		boolean error = false;
		
		for(EObject obj : function.eContainer().eContents()) {
			if(obj.hashCode() == function.hashCode()) {
				break;
			}
			
			if(obj.getClass().getSimpleName().equals(function.getClass().getSimpleName())) {
				error = true;
			}
		}
		
		if(error == true) {
			error("test", null);
		}
	}
	
	@Check
    public void validHostAddress(Webserver server) {
        String url = server.getUrl();
        String zeroTo255 = "(\\d{1,2}|(0|1)\\d{2}|2[0-4]\\d|25[0-5])"; 
        String regex = zeroTo255 + "\\." + zeroTo255 + "\\." + zeroTo255 + "\\." + zeroTo255; 
        Pattern p = Pattern.compile(regex); 
        Matcher m = p.matcher(url); 
        boolean urlValidity;

        if (url.isEmpty()) { 
            urlValidity = false; 
        } else if(!m.matches()) {
            urlValidity = false; 
        } else {
            urlValidity = true; 
        }

        if (urlValidity == false) {
            error("url / ip is invalid. Must be xxx.xxx.xxx.xxx where xxx is an int between 0-255", null);
        }
    }
}

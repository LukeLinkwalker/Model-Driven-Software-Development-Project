/*
 * generated by Xtext 2.21.0
 */
package org.group9.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.group9.iOTConnector.Board
import org.group9.iOTConnector.Wifi
import org.group9.iOTConnector.Webserver
import org.group9.iOTConnector.SensorConfig
import org.group9.iOTConnector.Config
import org.group9.iOTConnector.Function
import org.group9.iOTConnector.Sample
import org.group9.iOTConnector.Filter
import org.group9.iOTConnector.Send
import org.group9.iOTConnector.Sensor
import org.group9.iOTConnector.impl.SampleImpl
import org.group9.iOTConnector.impl.ProcessImpl
import org.group9.iOTConnector.impl.FilterImpl
import org.group9.iOTConnector.ProcessAction
import org.group9.iOTConnector.Div
import org.group9.iOTConnector.Minus
import org.group9.iOTConnector.Plus
import org.group9.iOTConnector.Mult
import org.group9.iOTConnector.Expression
import org.group9.iOTConnector.Num
import org.group9.iOTConnector.Var
import org.group9.iOTConnector.SampleAction
import org.group9.iOTConnector.TimeUnit
import org.group9.iOTConnector.ReadingName
import org.group9.iOTConnector.FilterExp

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IOTConnectorGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("main.py", compile(resource));
	}
	
	def String compile(Resource resource) {
		'''
		from network import WLAN
		from pysense import Pysense
		from LTR329ALS01 import LTR329ALS01
		from machine import Pin
		import machine
		import urequest
		import time
		import utime
		import pycom
		import ubinascii
		
		'''	
		+
		compileDefinitions(resource)
		+
		compileConstants(resource)
		+
		compileLightSensor(resource)
		+
		compileTemperatureSensor(resource)
		+
		compileConfigs(resource)
		+
		compileBoardAction(resource)
		+
		compileNetworking(resource)
	}
	
	def String compileDefinitions(Resource resource) {
		'''
		«FOR webserver : resource.allContents.toIterable.filter(Webserver)»
			webserver = "«webserver.getUrl()»:«webserver.getPort()»"
		«ENDFOR»
				
		wifis = [
		«FOR wifi : resource.allContents.toIterable.filter(Wifi) SEPARATOR ','»
			("«wifi.getSsid()»", "«wifi.getPassword()»")
		«ENDFOR»
		]
		
		'''
	}
	
	def String compileNetworking(Resource resource) {
		'''
		wlan = WLAN(mode=WLAN.STA)
		wlan.ifconfig(config='dhcp')
		
		pycom.heartbeat(False)
		connected = False
		
		while True:
		    if connected == True:
		        if not wlan.isconnected():
		            connected = False
		        else:
		            pycom.rgbled(0x00FF00)
		            boardAction(str(ubinascii.hexlify(machine.unique_id())))
		    
		    if connected == False:
		        pycom.rgbled(0xFF0000)
		        try:
		            nets = wlan.scan()
		        except OSError:
		            print("OSError happened ...")
		
		        for net in nets:
		            if connected == True:
		                break
		
		            for wifi in wifis:
		                if(wifi[0] == net.ssid):
		                    wlan.connect(net.ssid, auth=(WLAN.WPA2, wifi[1]), timeout=10000)
		                    connected = True
		                    utime.sleep_ms(10000)
		                    break
		                
		    utime.sleep_ms(1)
		    
		'''
	}
	
	def String compileConstants(Resource resource) {
		'''
		«FOR config : resource.allContents.toIterable.filter(Config)»
			«FOR sensor : config.getSensors()»
					«FOR output : sensor.getOutput().getReadingNames()»
						«compileVariable(VariableType.last_measured, output)» = -1
						«compileVariable(VariableType.sample_rate, output)» = -1
						«compileVariable(VariableType.filter_stack, output)» = []
						«compileVariable(VariableType.send_stack, output)» = []
					«ENDFOR»
					
			«ENDFOR»
		«ENDFOR»
		
		'''
	}
	
	enum VariableType {
		last_measured,
		sample_rate,
		filter_stack,
		send_stack
	}
	
	def String compileVariable(VariableType type, ReadingName output) {
		var sensor = output.eContainer().eContainer() as Sensor
		var config = sensor.eContainer() as Config
		
		return (
			//(global == true ? "global " : "") +
			config.getName() + "_" + 
			sensor.getName() + "_" +
			(sensor.getType() == null ? "internal" : sensor.getType()) + "_" + 
			output.getName() + "_" + 
			type.toString()
		);
	}
	
	def String compileConfigs(Resource resource) {
		'''
		«FOR config : resource.allContents.toIterable.filter(Config)»
			def «config.getName()»():
				«FOR sensor : config.getSensors()»
					«FOR output : sensor.getOutput().getReadingNames()»
						global «compileVariable(VariableType.last_measured, output)»
						global «compileVariable(VariableType.sample_rate, output)»
						global «compileVariable(VariableType.filter_stack, output)»
						global «compileVariable(VariableType.send_stack, output)»
					«ENDFOR»
				«ENDFOR»
				
				«FOR sensor : config.getSensors()»
					«FOR output : sensor.getOutput().getReadingNames()»
						«IF sensor.getType() !== null || sensor.getType() == ""»
							if («compileVariable(VariableType.last_measured, output)» == -1 or utime.ticks_diff(utime.ticks_ms(),  «config.getName()»_«sensor.getName()»_«sensor.getType()»_«output.getName()»_last_measured) > «config.getName()»_«sensor.getName()»_«sensor.getType()»_«output.getName()»_sample_rate):
								«compileVariable(VariableType.last_measured, output)» = utime.ticks_ms()
								
								«IF sensor.getOutput().getReadingNames().length() == 1»
									«output.getName()» = «compileSensorSampling(sensor)»
								«ELSE»
									«output.getName()» = «compileSensorSampling(sensor)»[«sensor.getOutput().getReadingNames().indexOf(output)»]
								«ENDIF»
								
								«FOR function : sensor.getFunctions()»
									«compileFunction(function, output)»
								«ENDFOR»
							
								«IF sensor.getSend() !== null»
									«compileSendFunction(sensor.getSend(), output)»
								«ENDIF»
						«ELSE»
							if («config.getName()»_«sensor.getName()»_internal_«output.getName()»_last_measured == -1 or utime.ticks_diff(utime.ticks_ms(),  «config.getName()»_«sensor.getName()»_internal_«output.getName()»_last_measured) > «config.getName()»_«sensor.getName()»_internal_«output.getName()»_sample_rate):
								«config.getName()»_«sensor.getName()»_internal_«output.getName()»_last_measured = utime.ticks_ms()
							
								«IF sensor.getOutput().getReadingNames().length() == 1»
									«output.getName()» = «compileSensorSampling(sensor)»
								«ELSE»
									«output.getName()» = «compileSensorSampling(sensor)»[«sensor.getOutput().getReadingNames().indexOf(output)»]
								«ENDIF»
								
								«FOR function : sensor.getFunctions()»
									«compileFunction(function, output)»
								«ENDFOR»
								
								«IF sensor.getSend() !== null»
									«compileSendFunction(sensor.getSend(), output)»
								«ENDIF»
						«ENDIF»
					«ENDFOR»
				«ENDFOR»
		«ENDFOR»
		
		'''
	}
	
	def String compileSensorSampling(Sensor sensor) {
		switch(sensor.getName()) {
			case "light":
				return '''lt.light()'''
			case "temperature":
				return '''apin.voltage()'''
		}
	}
	
	def String compileFunction(Function function, ReadingName output) {
		'''
		«IF function.getClass().getSimpleName() == "SampleImpl"»
			«compileSampleFunction(function, output)»
		«ENDIF»
		«IF function.getClass().getSimpleName() == "ProcessImpl"»
			«compileProcessFunction(function, output)»
		«ENDIF»
		«IF function.getClass().getSimpleName() == "FilterImpl"»
			«compileFilterFunction(function, output)»
		«ENDIF»
		
		'''
	}
	
	def String compileSampleFunction(Function function, ReadingName output) {
		var temp = function as SampleImpl
		var sensor = function.eContainer() as Sensor
		var config = sensor.eContainer() as Config
		var count = 0
		'''
		«FOR sampleAction : temp.getSampleActions()»
			«IF output.getName() == sampleAction.getReadingName().getName()»
				«{count += 1; null}»
				
				if («sampleAction.getReadingNameToCompare().getName().getName()» «sampleAction.getRelationalOperator.getValue()» «sampleAction.getNumber()»):
					«IF sensor.getType() !== null»
						«config.getName()»_«sensor.getName()»_«sensor.getType()»_«sampleAction.getReadingName().getName()»_sample_rate = «compileSampleAction(sampleAction)»
					«ELSE»
						«config.getName()»_«sensor.getName()»_internal_«sampleAction.getReadingName().getName()»_sample_rate = «compileSampleAction(sampleAction)»
					«ENDIF»
			«ENDIF»
		«ENDFOR»
		
		«IF count == 0»
			«IF sensor.getType() !== null»
				«config.getName()»_«sensor.getName()»_«sensor.getType()»_«output.getName()»_sample_rate = 1000
			«ELSE»
				«config.getName()»_«sensor.getName()»_internal_«output.getName()»_sample_rate = 1000
			«ENDIF»
			
		«ENDIF»
		'''
	}
	
	def String compileSampleAction(SampleAction action) {
		if(action.getTimeUnit().getValue().equals("ms") || action.getTimeUnit().getValue().equals("millisecond")) {
			return action.getAmountOfTime().toString()
		}
		
		if(action.getTimeUnit().getValue().equals("s") || action.getTimeUnit().getValue().equals("second")) {
			return (action.getAmountOfTime() * 1000).toString()
		}
		
		if(action.getTimeUnit().getValue().equals("m") || action.getTimeUnit().getValue().equals("minute")) {
			return (action.getAmountOfTime() * 60000).toString()
		}
	}
	
	def String compileProcessFunction(Function function, ReadingName output) {
		var temp = function as ProcessImpl
		'''
		«FOR processAction : temp.getProcessActions()»
			«IF processAction.getReadingName().getName() == output.getName()»
				«processAction.getReadingName().getName()» = «compileExp(processAction.getExp())»
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def String compileExp(Expression exp) {
		"("
		+
		switch exp {
			Plus: exp.getLeft().compileExp + "+" + exp.getRight().compileExp
			Minus: exp.getLeft().compileExp + "-" + exp.getRight().compileExp
			Mult: exp.getLeft().compileExp + "*" + exp.getRight().compileExp
			Div: exp.getLeft().compileExp + "/" + exp.getRight().compileExp
			Num: Integer.toString(exp.getValue())
			Var: exp.getReadingName().getName().getName()
		}
		+
		")"
	}
	
	def String compileFilterFunction(Function function, ReadingName output) {
		var temp = function as FilterImpl
		var sensor = function.eContainer() as Sensor
		var config = sensor.eContainer() as Config
		'''
		«FOR filterAction : temp.getFilterActions()»
			«IF filterAction.getReadingName().getName() == output.getName()»
				«IF filterAction.getFilterType() === null»
					«IF sensor.getType() !== null»
						if(«compileFilterExp(filterAction.getFilterExp())»):
							«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_send_stack.append(«output.getName()»)
					«ELSE»
						if(«compileFilterExp(filterAction.getFilterExp())»):
							«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_send_stack.append(«output.getName()»)
					«ENDIF»
				«ELSE»
					«IF sensor.getType() !== null»
						«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_filter_stack.append(«output.getName()»)
						if(len(«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_filter_stack) == «filterAction.getNumber()»):
							avg = 0
							for i in «config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_filter_stack:
								avg += i
							avg /= «filterAction.getNumber()»
							«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_send_stack.append(avg)
							«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_filter_stack.remove(«config.getName()»_«sensor.getName()»_«sensor.getType()»_«filterAction.getReadingName().getName()»_filter_stack[0])
					«ELSE»
						«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_filter_stack.append(«output.getName()»)
						if(len(«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_filter_stack) == «filterAction.getNumber()»):
							avg = 0
							for i in «config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_filter_stack:
								avg += i
							avg /= «filterAction.getNumber()»
							«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_send_stack.append(avg)
							«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_filter_stack.remove(«config.getName()»_«sensor.getName()»_internal_«filterAction.getReadingName().getName()»_filter_stack[0])
					«ENDIF»
				«ENDIF»
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def String compileFilterExp(FilterExp exp) {
		if(exp.getFilterExp() !== null) {
			return (exp.getReadingName().getName().getName() + " " + exp.getRelationalOperator().getValue() + " " + exp.getNumber() + " " + exp.getBitwiseOperator().getValue().toLowerCase() + " " + compileFilterExp(exp.getFilterExp()) + " ")
		} else {
			return (exp.getReadingName().getName().getName() + " " + exp.getRelationalOperator().getValue() + " " + exp.getNumber())
		}
	}
	
	def String compileSendFunction(Send function, ReadingName output) {
		var sensor = function.eContainer() as Sensor
		var config = sensor.eContainer() as Config
		'''
		«FOR sendAction : function.getSendActions()»
			«IF sendAction.getReadingName().getName() == output.getName()»
				«IF sensor.getType() !== null»
					if(len(«config.getName()»_«sensor.getName()»_«sensor.getType()»_«sendAction.getReadingName().getName()»_send_stack) «sendAction.getRelationalOperator.getValue()» «sendAction.getNumber()»):
						for i in «config.getName()»_«sensor.getName()»_«sensor.getType()»_«sendAction.getReadingName().getName()»_send_stack:
							r = urequest.request("POST", str("http://") +str(webserver) + str("/insert/") + str(ubinascii.hexlify(machine.unique_id())) + "/" + str("«sensor.getName()»") + "/" + str("«sensor.getType()»") + "/" + str(999),None)
							r.close()
						«config.getName()»_«sensor.getName()»_«sensor.getType()»_«sendAction.getReadingName().getName()»_send_stack.clear()
				«ELSE»
					if(len(«config.getName()»_«sensor.getName()»_internal_«sendAction.getReadingName().getName()»_send_stack) «sendAction.getRelationalOperator.getValue()» «sendAction.getNumber()»):
						for i in «config.getName()»_«sensor.getName()»_internal_«sendAction.getReadingName().getName()»_send_stack:
							r = urequest.request("POST", str("http://") +str(webserver) + str("/insert/") + str(ubinascii.hexlify(machine.unique_id())) + "/" + str("«sensor.getName()»") + "/internal/" + str(999),None)
							r.close()
						«config.getName()»_«sensor.getName()»_internal_«sendAction.getReadingName().getName()»_send_stack.clear()
				«ENDIF»
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def String compileBoardAction(Resource resource) {
		'''
		def boardAction(id):
			«var defaultConfig = ""»
			«var first = true»
			«FOR board : resource.allContents.toIterable.filter(Board)»
				«IF board.getName() !== null»
					«IF first == true»
						«{first = false; null}»
						if(id == "b'«board.getName()»'"):
							«board.getConfigName().getName()»()
					«ELSE»
						elif(id == "b'«board.getName()»'"):
							«board.getConfigName().getName()»()
					«ENDIF»
				«ELSE»
					«{defaultConfig = board.getConfigName().getName(); null}»
				«ENDIF»
			«ENDFOR»
			«IF defaultConfig != ""»
				else:
					«defaultConfig»()
			«ENDIF»
			
		'''
	}
	
	def String compileLightSensor(Resource resource) {
        '''
        py = Pysense()
        lt = LTR329ALS01(py)
        '''
    }

    def String compileTemperatureSensor(Resource resource) {
        '''
        «FOR sensorConfig : resource.allContents.toIterable.filter(SensorConfig)»
        	«IF sensorConfig.getName() == "temperature"»
        		 p_out = Pin('«sensorConfig.pinOut»', mode=Pin.OUT)
        		 p_out.value(0)
        		 time.sleep(1)
        		 p_out.value(1)
        		 
        		 adc = machine.ADC(bits=12)
        		 apin = adc.channel(pin='«sensorConfig.pinIn»', attn=machine.ADC.ATTN_11DB)
        	«ENDIF»
        «ENDFOR»
        '''
    }
}
